# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import httpx._urlparse as module_0
import httpx as module_1
import re as module_2
import ipaddress as module_3


def test_case_0():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = parse_result_0.__str__()
    assert str_0 == ""


def test_case_2():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = parse_result_0.__str__()
    assert str_0 == ""
    parse_result_1 = parse_result_0.copy_with()


def test_case_3():
    str_0 = "?\x0b00j}"
    with pytest.raises(module_1.InvalidURL):
        module_0.urlparse(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "^Wd?Ho`tCB_Qo\\=q!"
    dict_0 = {str_0: str_0}
    module_0.urlparse(**dict_0)


def test_case_5():
    str_0 = "FlCjrv+Ros\n\\sB;h\x0b:"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    with pytest.raises(module_1.InvalidURL):
        module_0.urlparse(**dict_0)


def test_case_6():
    str_0 = "?\x0b00j}"
    str_1 = module_0.encode_host(str_0)
    assert str_1 == "%3F%0B00j}"
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    parse_result_1 = parse_result_0.copy_with()
    str_0 = parse_result_1.__str__()
    assert str_0 == ""
    bool_0 = False
    str_1 = '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    var_0 = module_2.escape(str_1)
    var_1 = module_2.match(var_0, var_0)
    str_2 = module_0.normalize_path(str_1)
    assert (
        str_2
        == '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    )
    var_2 = module_0.normalize_port(var_1, str_1)
    str_3 = module_0.encode_host(var_0)
    assert (
        str_3
        == '\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20the\\%20url\\%20port\\%20as\\%20an\\%20integer\\.\\%0A\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20note\\%20that\\%20the\\%20url\\%20class\\%20performs\\%20port\\%20normalization\\%20as\\%20per\\%20the\\%20whatwg\\%20spec\\.\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20default\\%20ports\\%20for\\%20"http",\\%20"ht\\~ps",\\%20"ws",\\%20"wss",\\%20and\\%20"ftp"\\%20schemes\\%20are\\%20always\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20treated\\%20as\\%20`none`\\.\\%0A\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20for\\%20example%3A\\%0A\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20assert\\%20httpx\\.url\\("http%3A%2F%2Fwww\\.example\\.com"\\)\\%20==\\%20httpx\\.url\\("http%3A%2F%2Fwww\\.example\\.com%3A80"\\)\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20assert\\%20httpx\\.url\\("http%3A%2F%2Fwww\\.example\\.com%3A80"\\)\\.port\\%20is\\%20none\\%0A\\%20\\%20\\%20\\%20\\%20\\%20\\%20\\%20'
    )
    str_4 = module_0.normalize_path(str_0)
    assert str_4 == ""
    var_3 = module_0.normalize_port(bool_0, str_4)
    assert var_3 == 0
    str_5 = "put"
    str_6 = "\x0c~,>D6\\#\x0b7"
    dict_0 = {str_5: var_0, str_6: str_4}
    parse_result_1.copy_with(**dict_0)


def test_case_8():
    str_0 = "`sU=7`Na2$<\tP"
    bool_0 = True
    with pytest.raises(module_1.InvalidURL):
        module_0.validate_path(str_0, bool_0, bool_0)


def test_case_9():
    str_0 = "1%/_Zng\rmS8lLV"
    str_1 = "."
    str_2 = module_0.normalize_path(str_0)
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_3 = module_0.normalize_path(str_1)
    assert str_3 == ""


def test_case_10():
    str_0 = "DXz!.\\>C(ML)_pY\x0cpZ?"
    str_1 = module_0.normalize_path(str_0)
    assert str_1 == "DXz!.\\>C(ML)_pY\x0cpZ?"
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_2 = module_0.PERCENT(str_1)
    assert str_2 == "%44%58%7A%21%2E%5C%3E%43%28%4D%4C%29%5F%70%59%0C%70%5A%3F"
    str_3 = module_0.PERCENT(str_0)
    assert str_3 == "%44%58%7A%21%2E%5C%3E%43%28%4D%4C%29%5F%70%59%0C%70%5A%3F"


def test_case_11():
    str_0 = "SERVER_NAME"
    str_1 = module_0.encode_host(str_0)
    assert str_1 == "server_name"
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )


def test_case_12():
    int_0 = -1928
    var_0 = module_0.normalize_port(int_0, int_0)
    assert var_0 == -1928
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "Ys=`Vk~4\r`Kf"
    bool_0 = True
    bool_1 = False
    bool_2 = False
    bool_3 = True
    none_type_0 = module_0.validate_path(bool_1, bool_2, bool_3)
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    none_type_1 = module_0.validate_path(str_0, bool_0, bool_1)
    module_0.ParseResult()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    bool_1 = False
    none_type_0 = module_0.validate_path(bool_1, bool_0, bool_1)
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_0 = "Not Implemented"
    str_1 = module_0.normalize_path(str_0)
    var_0 = str_1.__str__()
    str_2 = var_0.__str__()
    module_0.percent_encoded(str_0, none_type_0)


def test_case_15():
    str_0 = "R;PSs`z-@l&|\x0cPe"
    str_1 = module_0.encode_host(str_0)
    assert str_1 == "r;pss`z-%40l&|%0Cpe"
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_2 = module_0.encode_host(str_1)
    assert str_2 == "r;pss`z-%40l&|%0cpe"
    str_3 = "qhOWOeLNch;f\n"
    with pytest.raises(module_1.InvalidURL):
        module_0.normalize_port(str_2, str_3)


def test_case_16():
    str_0 = '!w4Q%"V^Z)eqH~'
    parse_result_0 = module_0.urlparse(str_0)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_17():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    parse_result_1 = parse_result_0.copy_with()
    str_0 = "o!UgOmT"
    module_0.normalize_port(parse_result_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = "gSh"
    dict_0 = {str_0: str_0, str_0: str_0}
    parse_result_0.copy_with(**dict_0)


def test_case_19():
    none_type_0 = None
    str_0 = "pj-"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    parse_result_0 = module_0.urlparse(**dict_0)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )


def test_case_20():
    str_0 = 'o/|I"<Ou+l[F#'
    str_1 = module_0.quote(str_0, str_0)
    assert str_1 == 'o/|I"<Ou+l[F#'
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_2 = "/V\\9/o?#2[icG!!{V"
    str_3 = module_0.quote(str_2, str_2)
    assert str_3 == "/V\\9/o?#2[icG!!{V"
    parse_result_0 = module_0.urlparse(str_2)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_4 = "?\x0b00j}"
    with pytest.raises(ValueError):
        module_3.ip_address(str_4)


@pytest.mark.xfail(strict=True)
def test_case_21():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    parse_result_1 = parse_result_0.copy_with()
    str_0 = parse_result_1.__str__()
    assert str_0 == ""
    str_1 = parse_result_0.__str__()
    assert str_1 == ""
    str_2 = '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    var_0 = module_2.escape(str_2)
    str_3 = module_0.normalize_path(str_2)
    assert (
        str_3
        == '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    )
    var_1 = var_0.__eq__(var_0)
    str_4 = module_0.encode_host(str_3)
    assert (
        str_4
        == '%0A%20%20%20%20%20%20%20%20the%20url%20port%20as%20an%20integer.%0A%0A%20%20%20%20%20%20%20%20note%20that%20the%20url%20class%20performs%20port%20normalization%20as%20per%20the%20whatwg%20spec.%0A%20%20%20%20%20%20%20%20default%20ports%20for%20"http",%20"ht~ps",%20"ws",%20"wss",%20and%20"ftp"%20schemes%20are%20always%0A%20%20%20%20%20%20%20%20treated%20as%20`none`.%0A%0A%20%20%20%20%20%20%20%20for%20example%3A%0A%0A%20%20%20%20%20%20%20%20assert%20httpx.url("http%3A%2F%2Fwww.example.com")%20==%20httpx.url("http%3A%2F%2Fwww.example.com%3A80")%0A%20%20%20%20%20%20%20%20assert%20httpx.url("http%3A%2F%2Fwww.example.com%3A80").port%20is%20none%0A%20%20%20%20%20%20%20%20'
    )
    var_2 = module_0.normalize_port(var_1, var_1)
    assert var_2 == 1
    str_5 = "o0t"
    str_6 = module_0.encode_host(str_4)
    assert (
        str_6
        == '%0a%20%20%20%20%20%20%20%20the%20url%20port%20as%20an%20integer.%0a%0a%20%20%20%20%20%20%20%20note%20that%20the%20url%20class%20performs%20port%20normalization%20as%20per%20the%20whatwg%20spec.%0a%20%20%20%20%20%20%20%20default%20ports%20for%20"http",%20"ht~ps",%20"ws",%20"wss",%20and%20"ftp"%20schemes%20are%20always%0a%20%20%20%20%20%20%20%20treated%20as%20`none`.%0a%0a%20%20%20%20%20%20%20%20for%20example%3a%0a%0a%20%20%20%20%20%20%20%20assert%20httpx.url("http%3a%2f%2fwww.example.com")%20==%20httpx.url("http%3a%2f%2fwww.example.com%3a80")%0a%20%20%20%20%20%20%20%20assert%20httpx.url("http%3a%2f%2fwww.example.com%3a80").port%20is%20none%0a%20%20%20%20%20%20%20%20'
    )
    dict_0 = {str_5: var_0, str_3: var_1}
    parse_result_1.copy_with(**dict_0)


def test_case_22():
    str_0 = 'o/|I"<Ou+l[F#'
    str_1 = module_0.quote(str_0, str_0)
    assert str_1 == 'o/|I"<Ou+l[F#'
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_2 = "/V\\9/o?#2[icG!!{V"
    str_3 = module_0.quote(str_2, str_2)
    assert str_3 == "/V\\9/o?#2[icG!!{V"
    parse_result_0 = module_0.urlparse(str_2)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_4 = "?\x0b00j}"
    str_5 = parse_result_0.__str__()
    assert str_5 == "/V\\9/o?#2[icG!!{V"
    with pytest.raises(ValueError):
        module_3.ip_address(str_4)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "z8et:"
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_1 = parse_result_0.__str__()
    assert str_1 == ""
    bool_0 = True
    none_type_1 = module_0.validate_path(none_type_0, parse_result_0, bool_0)
    parse_result_1 = module_0.urlparse(str_0)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_1) == 7
    parse_result_2 = parse_result_1.copy_with()
    str_2 = '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    str_3 = module_0.normalize_path(str_2)
    assert (
        str_3
        == '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    )
    var_0 = str_2.__repr__()
    str_4 = module_0.encode_host(str_0)
    assert str_4 == "z8et%3A"
    str_5 = module_0.normalize_path(str_1)
    assert str_5 == ""
    parse_result_3 = parse_result_2.copy_with()
    str_6 = "q$bxToB>1}\\"
    str_7 = "D\\<\r.~UOsd)e\r.Dq!_C"
    dict_0 = {str_6: none_type_1, str_4: none_type_1, str_7: var_0}
    parse_result_3.copy_with(**dict_0)


def test_case_24():
    str_0 = "[red]"
    with pytest.raises(module_1.InvalidURL):
        module_0.encode_host(str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = "get"
    none_type_0 = None
    str_1 = parse_result_0.__str__()
    assert str_1 == ""
    bool_0 = True
    parse_result_1 = parse_result_0.copy_with()
    parse_result_2 = module_0.urlparse(str_0)
    assert (
        f"{type(parse_result_2).__module__}.{type(parse_result_2).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_2) == 7
    str_2 = '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    var_0 = module_0.normalize_port(bool_0, none_type_0)
    assert var_0 == 1
    str_3 = parse_result_1.__str__()
    assert str_3 == ""
    dict_0 = {str_2: str_2, str_0: str_2}
    str_4 = module_0.normalize_path(str_2)
    assert (
        str_4
        == '\n        The URL port as an integer.\n\n        Note that the URL class performs port normalization as per the WHATWG spec.\n        Default ports for "http", "ht~ps", "ws", "wss", and "ftp" schemes are always\n        treated as `None`.\n\n        For example:\n\n        assert httpx.URL("http://www.example.com") == httpx.URL("http://www.example.com:80")\n        assert httpx.URL("http://www.example.com:80").port is None\n        '
    )
    str_5 = module_0.encode_host(str_0)
    assert str_5 == "get"
    str_6 = module_0.normalize_path(str_1)
    assert str_6 == ""
    str_7 = parse_result_0.__str__()
    assert str_7 == ""
    str_8 = "\x0b."
    str_9 = "/0~p@cB(3A$\x0c;|;?jaa"
    none_type_1 = module_0.validate_path(str_9, str_7, bool_0)
    str_10 = module_0.normalize_path(str_8)
    parse_result_3 = parse_result_1.copy_with()
    parse_result_0.copy_with(**dict_0)


def test_case_26():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = "./jojQ"
    str_1 = module_0.normalize_path(str_0)
    assert str_1 == "jojQ"
    str_2 = parse_result_0.__str__()
    assert str_2 == ""


def test_case_27():
    parse_result_0 = module_0.urlparse()
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_0) == 7
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        f"{type(module_0.ParseResult.authority).__module__}.{type(module_0.ParseResult.authority).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.ParseResult.netloc).__module__}.{type(module_0.ParseResult.netloc).__qualname__}"
        == "builtins.property"
    )
    str_0 = "get"
    parse_result_1 = module_0.urlparse()
    none_type_0 = None
    var_0 = module_0.normalize_port(none_type_0, str_0)
    str_1 = parse_result_1.__str__()
    assert str_1 == ""
    bool_0 = False
    none_type_1 = module_0.validate_path(none_type_0, parse_result_0, bool_0)
    parse_result_2 = parse_result_0.copy_with()
    parse_result_3 = module_0.urlparse(str_0)
    assert (
        f"{type(parse_result_3).__module__}.{type(parse_result_3).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_3) == 7
    var_1 = module_0.normalize_port(bool_0, none_type_1)
    assert var_1 == 0
    str_2 = parse_result_3.__str__()
    assert str_2 == "get"
    str_3 = parse_result_1.__str__()
    assert str_3 == ""
    str_4 = ":@Qm+13Gy&rb=:"
    parse_result_4 = module_0.urlparse(str_4)
    assert (
        f"{type(parse_result_4).__module__}.{type(parse_result_4).__qualname__}"
        == "httpx._urlparse.ParseResult"
    )
    assert len(parse_result_4) == 7
    var_2 = module_2.purge()
    str_5 = module_0.encode_host(str_0)
    assert str_5 == "get"
    str_6 = module_0.normalize_path(str_1)
    assert str_6 == ""
    str_7 = parse_result_0.__str__()
    assert str_7 == ""
    str_8 = var_2.__str__()
    bool_1 = False
    with pytest.raises(module_1.InvalidURL):
        module_0.validate_path(str_4, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = ".."
    var_0 = module_2.escape(str_0)
    str_1 = module_0.normalize_path(str_0)
    assert str_1 == ""
    assert module_0.MAX_URL_LENGTH == 65536
    assert (
        module_0.UNRESERVED_CHARACTERS
        == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~"
    )
    assert module_0.SUB_DELIMS == "!$&'()*+,;="
    assert (
        module_0.FRAG_SAFE
        == "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.QUERY_SAFE
        == "!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    )
    assert (
        module_0.PATH_SAFE
        == "!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz|~"
    )
    assert (
        module_0.USERNAME_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.PASSWORD_SAFE
        == "!$%&'()*+,-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    assert (
        module_0.USERINFO_SAFE
        == "!$%&'()*+,-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"
    )
    str_2 = module_0.encode_host(str_1)
    assert str_2 == ""
    var_1 = module_0.normalize_port(str_1, str_1)
    var_2 = var_0.__lt__(str_1)
    var_0.copy_with()
