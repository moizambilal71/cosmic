# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.preprocessing.transactionencoder as module_0
import numpy.ma.extras as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    transaction_encoder_0 = module_0.TransactionEncoder()
    transaction_encoder_0.transform(transaction_encoder_0, transaction_encoder_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    transaction_encoder_0 = module_0.TransactionEncoder()
    transaction_encoder_0.transform(transaction_encoder_0)


def test_case_2():
    transaction_encoder_0 = module_0.TransactionEncoder()


@pytest.mark.xfail(strict=True)
def test_case_3():
    transaction_encoder_0 = module_0.TransactionEncoder()
    none_type_0 = None
    var_0 = transaction_encoder_0.get_params()
    var_1 = transaction_encoder_0.inverse_transform(var_0)
    var_2 = var_0.__str__()
    var_3 = transaction_encoder_0.fit_transform(var_2)
    assert transaction_encoder_0.columns_ == ["{", "}"]
    assert transaction_encoder_0.columns_mapping_ == {"{": 0, "}": 1}
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "numpy.ndarray"
    assert len(var_3) == 2
    transaction_encoder_0.transform(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    transaction_encoder_0 = module_0.TransactionEncoder()
    var_0 = transaction_encoder_0.get_metadata_routing()
    var_1 = transaction_encoder_0.get_metadata_routing()
    transaction_encoder_1 = module_0.TransactionEncoder()
    transaction_encoder_0.fit_transform(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    transaction_encoder_0 = module_0.TransactionEncoder()
    transaction_encoder_1 = module_0.TransactionEncoder()
    transaction_encoder_1.get_feature_names_out()


@pytest.mark.xfail(strict=True)
def test_case_6():
    transaction_encoder_0 = module_0.TransactionEncoder()
    var_0 = transaction_encoder_0.get_params()
    var_1 = var_0.__str__()
    transaction_encoder_0.inverse_transform(var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    transaction_encoder_0 = module_0.TransactionEncoder()
    var_0 = module_1.mr_class()
    transaction_encoder_0.inverse_transform(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    transaction_encoder_0 = module_0.TransactionEncoder()
    var_0 = transaction_encoder_0.get_params(transaction_encoder_0)
    var_1 = transaction_encoder_0.inverse_transform(var_0)
    var_2 = var_0.__str__()
    var_3 = transaction_encoder_0.fit_transform(var_2, transaction_encoder_0)
    assert transaction_encoder_0.columns_ == ["{", "}"]
    assert transaction_encoder_0.columns_mapping_ == {"{": 0, "}": 1}
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "scipy.sparse._csr.csr_matrix"
    )
    assert var_3.maxprint == 50
    assert (
        f"{type(var_3.indices).__module__}.{type(var_3.indices).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_3.indices) == 2
    assert (
        f"{type(var_3.indptr).__module__}.{type(var_3.indptr).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_3.indptr) == 3
    assert (
        f"{type(var_3.data).__module__}.{type(var_3.data).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_3.data) == 2
    var_2.get_feature_names_out()
