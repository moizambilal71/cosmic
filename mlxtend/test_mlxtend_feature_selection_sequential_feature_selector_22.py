# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.feature_selection.sequential_feature_selector as module_0
import scipy.optimize.optimize as module_1
import scipy.optimize.minpack2 as module_2
import json as module_3


def test_case_0():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.SequentialFeatureSelector(
            none_type_0,
            none_type_0,
            floating=none_type_0,
            verbose=none_type_0,
            feature_groups=none_type_0,
        )


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.__dir__()
    var_0.finalize_fit()


def test_case_2():
    none_type_0 = None
    with pytest.raises(AttributeError):
        module_0.SequentialFeatureSelector(
            none_type_0,
            forward=none_type_0,
            floating=none_type_0,
            clone_estimator=none_type_0,
        )


def test_case_3():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0,
        var_0,
        verbose=var_0,
        scoring=var_0,
        cv=var_0,
        clone_estimator=var_0,
        fixed_features=var_0,
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == []
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == []
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == []
    assert sequential_feature_selector_0.clone_estimator == []
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features == []
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )


def test_case_4():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0,
        var_0,
        verbose=var_0,
        scoring=var_0,
        cv=var_0,
        clone_estimator=var_0,
        fixed_features=var_0,
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == []
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == []
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == []
    assert sequential_feature_selector_0.clone_estimator == []
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features == []
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )
    var_1 = sequential_feature_selector_0.get_params()


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0,
        var_0,
        verbose=var_0,
        scoring=var_0,
        cv=var_0,
        clone_estimator=var_0,
        fixed_features=var_0,
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == []
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == []
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == []
    assert sequential_feature_selector_0.clone_estimator == []
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features == []
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )
    sequential_feature_selector_0.fit_transform(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_3.dumps(
        none_type_0,
        skipkeys=none_type_0,
        allow_nan=none_type_0,
        indent=none_type_0,
        separators=none_type_0,
        default=none_type_0,
    )
    module_0.SequentialFeatureSelector(
        none_type_0,
        none_type_0,
        floating=none_type_0,
        scoring=var_0,
        pre_dispatch=none_type_0,
        clone_estimator=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0, verbose=var_0, scoring=var_0, cv=var_0
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == 1
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == []
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == []
    assert sequential_feature_selector_0.clone_estimator is True
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features is None
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )
    sequential_feature_selector_0.finalize_fit()


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0,
        var_0,
        verbose=var_0,
        scoring=var_0,
        cv=var_0,
        clone_estimator=var_0,
        fixed_features=var_0,
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == []
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == []
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == []
    assert sequential_feature_selector_0.clone_estimator == []
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features == []
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )
    var_1 = sequential_feature_selector_0.get_params()
    var_2 = sequential_feature_selector_0.set_params()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert var_2.estimator == []
    assert var_2.k_features == []
    assert var_2.forward is True
    assert var_2.floating is False
    assert var_2.pre_dispatch == "2*n_jobs"
    assert var_2.cv == []
    assert var_2.n_jobs == 1
    assert var_2.verbose == []
    assert var_2.clone_estimator == []
    assert var_2.est_ == []
    assert var_2.scoring == []
    assert var_2.scorer == []
    assert var_2.fixed_features == []
    assert var_2.feature_groups is None
    assert var_2.fitted is False
    assert var_2.interrupted_ is False
    var_0.finalize_fit()


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_2.__dir__()
    sequential_feature_selector_0 = module_0.SequentialFeatureSelector(
        var_0, var_0, scoring=var_0, fixed_features=var_0
    )
    assert (
        f"{type(sequential_feature_selector_0).__module__}.{type(sequential_feature_selector_0).__qualname__}"
        == "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector"
    )
    assert sequential_feature_selector_0.estimator == []
    assert sequential_feature_selector_0.k_features == []
    assert sequential_feature_selector_0.forward is True
    assert sequential_feature_selector_0.floating is False
    assert sequential_feature_selector_0.pre_dispatch == "2*n_jobs"
    assert sequential_feature_selector_0.cv == 5
    assert sequential_feature_selector_0.n_jobs == 1
    assert sequential_feature_selector_0.verbose == 0
    assert sequential_feature_selector_0.clone_estimator is True
    assert sequential_feature_selector_0.est_ == []
    assert sequential_feature_selector_0.scoring == []
    assert sequential_feature_selector_0.scorer == []
    assert sequential_feature_selector_0.fixed_features == []
    assert sequential_feature_selector_0.feature_groups is None
    assert sequential_feature_selector_0.fitted is False
    assert sequential_feature_selector_0.interrupted_ is False
    assert (
        f"{type(module_0.SequentialFeatureSelector.named_estimators).__module__}.{type(module_0.SequentialFeatureSelector.named_estimators).__qualname__}"
        == "builtins.property"
    )
    sequential_feature_selector_0.get_metric_dict()
