# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.preprocessing.scaling as module_0
import pandas.io.formats.console as module_1
import numpy.ma.extras as module_2
import numpy.ma.core as module_3
import difflib as module_4
import numpy.testing._private.utils as module_5
import numpy.polynomial.legendre as module_6
import numpy as module_7


def test_case_0():
    none_type_0 = None
    with pytest.raises(AttributeError):
        module_0.standardize(none_type_0, ddof=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.get_console_size()
    var_1 = module_2.masked_all_like(var_0)
    module_0.standardize(var_1, var_1, return_params=var_1, params=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_2.masked_all_like(none_type_0)
    module_0.standardize(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_2.masked_all_like(none_type_0)
    module_0.standardize(var_0, var_0, return_params=var_0, params=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_3.reshape(none_type_0, none_type_0)
    module_0.minmax_scaling(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = module_1.get_console_size()
    var_0 = module_2.masked_all_like(tuple_0)
    module_0.minmax_scaling(var_0, var_0, max_val=var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_4.context_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
    )
    var_1 = module_2.masked_all_like(var_0)
    module_0.standardize(var_1, var_1, return_params=var_1, params=var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = module_1.get_console_size()
    var_0 = module_2.masked_all_like(tuple_0)
    var_1 = module_0.standardize(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ma.MaskedArray"
    )
    assert len(var_1) == 2
    var_1.assertIsNot(tuple_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = module_1.get_console_size()
    var_0 = module_2.masked_all_like(tuple_0)
    var_1 = module_0.standardize(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ma.MaskedArray"
    )
    assert len(var_1) == 2
    var_2 = module_2.masked_all_like(tuple_0)
    var_3 = module_0.standardize(var_1, return_params=tuple_0)
    module_5.assert_array_less(var_2, var_1, strict=var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = module_1.get_console_size()
    var_0 = module_2.masked_all_like(tuple_0)
    var_1 = module_0.standardize(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ma.MaskedArray"
    )
    assert len(var_1) == 2
    module_0.minmax_scaling(var_0, var_0)
    var_2 = module_0.standardize(var_0, ddof=var_0, return_params=var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = module_1.get_console_size()
    var_0 = module_6.legvander2d(tuple_0, tuple_0, tuple_0)
    var_1 = module_0.standardize(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ndarray"
    assert len(var_1) == 2
    var_2 = module_3.allequal(var_0, var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "numpy.bool"
    module_0.minmax_scaling(var_1, var_0, var_0, var_2)


def test_case_11():
    tuple_0 = module_1.get_console_size()
    var_0 = module_6.legvander2d(tuple_0, tuple_0, tuple_0)
    var_1 = module_0.standardize(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ndarray"
    assert len(var_1) == 2
    var_2 = module_3.allequal(var_0, var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "numpy.bool"
    var_3 = module_7.get_include()
    var_4 = module_0.minmax_scaling(var_1, tuple_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "numpy.ndarray"
    assert len(var_4) == 2
    with pytest.raises(AttributeError):
        module_0.minmax_scaling(var_2, var_3)


def test_case_12():
    tuple_0 = module_1.get_console_size()
    var_0 = module_7.trapz(tuple_0)
    with pytest.raises(AttributeError):
        module_0.standardize(var_0)


def test_case_13():
    tuple_0 = module_1.get_console_size()
    var_0 = module_6.legvander2d(tuple_0, tuple_0, tuple_0)
    var_1 = module_0.standardize(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ndarray"
    assert len(var_1) == 2
    var_2 = module_3.allequal(var_0, var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "numpy.bool"
    var_3 = module_7.get_include()
    var_4 = module_0.minmax_scaling(var_1, tuple_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "numpy.ndarray"
    assert len(var_4) == 2
    var_5 = module_0.minmax_scaling(var_4, var_2, var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "numpy.ndarray"
    assert len(var_5) == 2
    with pytest.raises(AttributeError):
        module_0.minmax_scaling(tuple_0, var_4, var_3)
