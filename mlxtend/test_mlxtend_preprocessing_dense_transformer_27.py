# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.preprocessing.dense_transformer as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    dense_transformer_0 = module_0.DenseTransformer()
    assert (
        f"{type(dense_transformer_0).__module__}.{type(dense_transformer_0).__qualname__}"
        == "mlxtend.preprocessing.dense_transformer.DenseTransformer"
    )
    assert dense_transformer_0.return_copy is True
    assert dense_transformer_0.is_fitted is False
    dense_transformer_0.fit_transform(dense_transformer_0, dense_transformer_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    dense_transformer_0 = module_0.DenseTransformer()
    assert (
        f"{type(dense_transformer_0).__module__}.{type(dense_transformer_0).__qualname__}"
        == "mlxtend.preprocessing.dense_transformer.DenseTransformer"
    )
    assert dense_transformer_0.return_copy is True
    assert dense_transformer_0.is_fitted is False
    bool_0 = True
    dense_transformer_1 = module_0.DenseTransformer()
    assert dense_transformer_1.return_copy is True
    assert dense_transformer_1.is_fitted is False
    none_type_0 = None
    var_0 = dense_transformer_1.fit(bool_0, none_type_0)
    assert var_0.return_copy is True
    dense_transformer_1.fit_transform(var_0)


def test_case_2():
    bool_0 = False
    dense_transformer_0 = module_0.DenseTransformer(bool_0)
    assert (
        f"{type(dense_transformer_0).__module__}.{type(dense_transformer_0).__qualname__}"
        == "mlxtend.preprocessing.dense_transformer.DenseTransformer"
    )
    assert dense_transformer_0.return_copy is False
    assert dense_transformer_0.is_fitted is False
    bytes_0 = b"\n"
    none_type_0 = None
    var_0 = dense_transformer_0.fit_transform(bool_0, none_type_0)
    assert var_0 is False
    dense_transformer_1 = module_0.DenseTransformer()
    dense_transformer_1.fit_transform(bytes_0)
