# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.preprocessing.onehot as module_0
import numpy as module_1
import numpy.ma.core as module_2
import numpy.f2py.auxfuncs as module_3
import numpy.strings as module_4
import sysconfig as module_5


def test_case_0():
    none_type_0 = None
    with pytest.raises(AttributeError):
        module_0.one_hot(none_type_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(AttributeError):
        module_0.one_hot(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.__dir__()
    var_1 = var_0.__contains__(var_0)
    module_0.one_hot(var_0, var_1)


def test_case_3():
    none_type_0 = None
    var_0 = module_2.masked_equal(none_type_0, none_type_0)
    with pytest.raises(AttributeError):
        module_0.one_hot(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.__dir__()
    module_0.one_hot(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.__dir__()
    var_1 = module_3.isfalse(var_0)
    module_0.one_hot(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1.__dir__()
    var_1 = module_3.isfalse(var_0)
    var_2 = module_4.index(var_0, var_0, var_1)
    var_3 = module_0.one_hot(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "numpy.ndarray"
    assert len(var_3) == 1
    var_4 = var_2.__floordiv__(var_2)
    var_5 = module_5.get_default_scheme()
    module_2.masked_equal(var_0, var_1)
