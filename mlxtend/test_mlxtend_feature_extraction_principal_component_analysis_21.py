# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.feature_extraction.principal_component_analysis as module_0
import scipy.linalg._special_matrices as module_1
import email._header_value_parser as module_2
import numpy.polynomial.hermite as module_3
import scipy._lib.array_api_compat.common._aliases as module_4


def test_case_0():
    none_type_0 = None
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis(
        whitening=none_type_0
    )
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is None
    with pytest.raises(AttributeError):
        module_0.PrincipalComponentAnalysis(solver=none_type_0)


def test_case_1():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    var_0 = module_1.hankel(principal_component_analysis_0)
    principal_component_analysis_0.fit(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    module_0.PrincipalComponentAnalysis(
        principal_component_analysis_0, whitening=principal_component_analysis_0
    )


def test_case_4():
    none_type_0 = None
    var_0 = module_2.parse_mime_version(none_type_0)
    var_1 = var_0.__lt__(var_0)
    with pytest.raises(AttributeError):
        module_0.PrincipalComponentAnalysis(var_1, whitening=var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    none_type_0 = None
    var_0 = module_2.parse_mime_version(none_type_0)
    var_1 = module_3.hermfromroots(var_0)
    principal_component_analysis_1 = module_0.PrincipalComponentAnalysis(
        var_1, whitening=var_1
    )
    assert (
        f"{type(principal_component_analysis_1).__module__}.{type(principal_component_analysis_1).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_1.solver == "svd"
    assert (
        f"{type(principal_component_analysis_1.n_components).__module__}.{type(principal_component_analysis_1.n_components).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_1.n_components) == 1
    assert (
        f"{type(principal_component_analysis_1.whitening).__module__}.{type(principal_component_analysis_1.whitening).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_1.whitening) == 1
    principal_component_analysis_2 = module_0.PrincipalComponentAnalysis()
    principal_component_analysis_0.fit(var_0)


def test_case_6():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    var_0 = module_1.hankel(principal_component_analysis_0)
    with pytest.raises(AttributeError):
        principal_component_analysis_0.transform(var_0)


def test_case_7():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    var_0 = module_1.hankel(
        principal_component_analysis_0, principal_component_analysis_0
    )
    var_1 = module_4.isdtype(var_0, var_0, principal_component_analysis_0)
    var_2 = principal_component_analysis_0.fit(var_1)
    assert (
        f"{type(principal_component_analysis_0.e_vals_).__module__}.{type(principal_component_analysis_0.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vecs_).__module__}.{type(principal_component_analysis_0.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vecs_) == 1
    assert (
        f"{type(principal_component_analysis_0.w_).__module__}.{type(principal_component_analysis_0.w_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.w_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vals_normalized_).__module__}.{type(principal_component_analysis_0.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_normalized_) == 1
    assert (
        f"{type(principal_component_analysis_0.loadings_).__module__}.{type(principal_component_analysis_0.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.loadings_) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert var_2.solver == "svd"
    assert var_2.n_components is None
    assert var_2.whitening is False
    assert (
        f"{type(var_2.e_vals_).__module__}.{type(var_2.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_) == 1
    assert (
        f"{type(var_2.e_vecs_).__module__}.{type(var_2.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vecs_) == 1
    assert (
        f"{type(var_2.w_).__module__}.{type(var_2.w_).__qualname__}" == "numpy.ndarray"
    )
    assert len(var_2.w_) == 1
    assert (
        f"{type(var_2.e_vals_normalized_).__module__}.{type(var_2.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_normalized_) == 1
    assert (
        f"{type(var_2.loadings_).__module__}.{type(var_2.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.loadings_) == 1


@pytest.mark.xfail(strict=True)
def test_case_8():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    var_0 = module_1.hankel(principal_component_analysis_0)
    var_1 = module_4.isdtype(var_0, principal_component_analysis_0, var_0)
    var_2 = principal_component_analysis_0.fit(var_1)
    assert (
        f"{type(principal_component_analysis_0.e_vals_).__module__}.{type(principal_component_analysis_0.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vecs_).__module__}.{type(principal_component_analysis_0.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vecs_) == 1
    assert (
        f"{type(principal_component_analysis_0.w_).__module__}.{type(principal_component_analysis_0.w_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.w_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vals_normalized_).__module__}.{type(principal_component_analysis_0.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_normalized_) == 1
    assert (
        f"{type(principal_component_analysis_0.loadings_).__module__}.{type(principal_component_analysis_0.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.loadings_) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert var_2.solver == "svd"
    assert var_2.n_components is None
    assert var_2.whitening is False
    assert (
        f"{type(var_2.e_vals_).__module__}.{type(var_2.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_) == 1
    assert (
        f"{type(var_2.e_vecs_).__module__}.{type(var_2.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vecs_) == 1
    assert (
        f"{type(var_2.w_).__module__}.{type(var_2.w_).__qualname__}" == "numpy.ndarray"
    )
    assert len(var_2.w_) == 1
    assert (
        f"{type(var_2.e_vals_normalized_).__module__}.{type(var_2.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_normalized_) == 1
    assert (
        f"{type(var_2.loadings_).__module__}.{type(var_2.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.loadings_) == 1
    var_2.transform(var_0)


def test_case_9():
    principal_component_analysis_0 = module_0.PrincipalComponentAnalysis()
    assert (
        f"{type(principal_component_analysis_0).__module__}.{type(principal_component_analysis_0).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert principal_component_analysis_0.solver == "svd"
    assert principal_component_analysis_0.n_components is None
    assert principal_component_analysis_0.whitening is False
    var_0 = module_1.hankel(principal_component_analysis_0)
    var_1 = module_4.isdtype(var_0, principal_component_analysis_0, var_0)
    var_2 = principal_component_analysis_0.fit(var_1)
    assert (
        f"{type(principal_component_analysis_0.e_vals_).__module__}.{type(principal_component_analysis_0.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vecs_).__module__}.{type(principal_component_analysis_0.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vecs_) == 1
    assert (
        f"{type(principal_component_analysis_0.w_).__module__}.{type(principal_component_analysis_0.w_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.w_) == 1
    assert (
        f"{type(principal_component_analysis_0.e_vals_normalized_).__module__}.{type(principal_component_analysis_0.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.e_vals_normalized_) == 1
    assert (
        f"{type(principal_component_analysis_0.loadings_).__module__}.{type(principal_component_analysis_0.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(principal_component_analysis_0.loadings_) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis"
    )
    assert var_2.solver == "svd"
    assert var_2.n_components is None
    assert var_2.whitening is False
    assert (
        f"{type(var_2.e_vals_).__module__}.{type(var_2.e_vals_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_) == 1
    assert (
        f"{type(var_2.e_vecs_).__module__}.{type(var_2.e_vecs_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vecs_) == 1
    assert (
        f"{type(var_2.w_).__module__}.{type(var_2.w_).__qualname__}" == "numpy.ndarray"
    )
    assert len(var_2.w_) == 1
    assert (
        f"{type(var_2.e_vals_normalized_).__module__}.{type(var_2.e_vals_normalized_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.e_vals_normalized_) == 1
    assert (
        f"{type(var_2.loadings_).__module__}.{type(var_2.loadings_).__qualname__}"
        == "numpy.ndarray"
    )
    assert len(var_2.loadings_) == 1
    var_3 = principal_component_analysis_0.transform(var_1)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "numpy.ndarray"
    assert len(var_3) == 1
