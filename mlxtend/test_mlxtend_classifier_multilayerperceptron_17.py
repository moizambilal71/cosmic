# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpy.testing.overrides as module_0
import mlxtend.classifier.multilayerperceptron as module_1


def test_case_0():
    var_0 = module_0.get_overridable_numpy_array_functions()
    with pytest.raises(AttributeError):
        module_1.MultiLayerPerceptron(
            hidden_layers=var_0, momentum=var_0, dropout=var_0, minibatches=var_0
        )


def test_case_1():
    multi_layer_perceptron_0 = module_1.MultiLayerPerceptron()
    assert (
        f"{type(multi_layer_perceptron_0).__module__}.{type(multi_layer_perceptron_0).__qualname__}"
        == "mlxtend.classifier.multilayerperceptron.MultiLayerPerceptron"
    )
    assert multi_layer_perceptron_0.hidden_layers == [50]
    assert multi_layer_perceptron_0.eta == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert multi_layer_perceptron_0.n_classes is None
    assert multi_layer_perceptron_0.l1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert multi_layer_perceptron_0.l2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert multi_layer_perceptron_0.decrease_const == pytest.approx(
        0.0, abs=0.01, rel=0.01
    )
    assert multi_layer_perceptron_0.momentum == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert multi_layer_perceptron_0.epochs == 50
    assert multi_layer_perceptron_0.minibatches == 1
    assert multi_layer_perceptron_0.random_seed is None
    assert multi_layer_perceptron_0.print_progress == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    multi_layer_perceptron_0 = module_1.MultiLayerPerceptron(
        none_type_0, l1=none_type_0, l2=none_type_0, decrease_const=none_type_0
    )
    assert (
        f"{type(multi_layer_perceptron_0).__module__}.{type(multi_layer_perceptron_0).__qualname__}"
        == "mlxtend.classifier.multilayerperceptron.MultiLayerPerceptron"
    )
    assert multi_layer_perceptron_0.hidden_layers == [50]
    assert multi_layer_perceptron_0.eta is None
    assert multi_layer_perceptron_0.n_classes is None
    assert multi_layer_perceptron_0.l1 is None
    assert multi_layer_perceptron_0.l2 is None
    assert multi_layer_perceptron_0.decrease_const is None
    assert multi_layer_perceptron_0.momentum == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert multi_layer_perceptron_0.epochs == 50
    assert multi_layer_perceptron_0.minibatches == 1
    assert multi_layer_perceptron_0.random_seed is None
    assert multi_layer_perceptron_0.print_progress == 0
    multi_layer_perceptron_0.predict_proba(multi_layer_perceptron_0)
