# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mlxtend.preprocessing.copy_transformer as module_0
import numpy as module_1
import numpy.polynomial.polyutils as module_2


def test_case_0():
    copy_transformer_0 = module_0.CopyTransformer()
    with pytest.raises(ValueError):
        copy_transformer_0.transform(copy_transformer_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    copy_transformer_0 = module_0.CopyTransformer()
    copy_transformer_0.fit_transform(copy_transformer_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    copy_transformer_0 = module_0.CopyTransformer()
    var_0 = copy_transformer_0.fit(copy_transformer_0)
    copy_transformer_0.fit_transform(copy_transformer_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    copy_transformer_0 = module_1.__dir__()
    copy_transformer_1 = module_0.CopyTransformer()
    var_0 = copy_transformer_1.fit_transform(copy_transformer_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "numpy.ndarray"
    assert len(var_0) == 536
    copy_transformer_0.transform(copy_transformer_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    copy_transformer_0 = module_0.CopyTransformer()
    var_0 = module_2.getdomain(copy_transformer_0)
    var_1 = copy_transformer_0.fit_transform(var_0, copy_transformer_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "numpy.ndarray"
    assert len(var_1) == 2
    copy_transformer_1 = module_0.CopyTransformer()
    var_1.get_params(copy_transformer_0)
