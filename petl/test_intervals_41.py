# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import intervals as module_0
import petl.util.base as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.intervaljoin(
        none_type_0, none_type_0, rstart=none_type_0, rkey=none_type_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalJoinView"
    )
    assert var_0.left is None
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey is None
    assert var_0.right is None
    assert var_0.rstart is None
    assert var_0.rstop == "stop"
    assert var_0.rkey is None
    assert var_0.include_stop is False
    assert var_0.lprefix is None
    assert var_0.rprefix is None


def test_case_1():
    bool_0 = False
    none_type_0 = None
    bytes_0 = b"\x86@"
    with pytest.raises(AssertionError):
        module_0.intervaljoin(
            bool_0,
            bool_0,
            lstop=none_type_0,
            rkey=bool_0,
            include_stop=bool_0,
            rprefix=bytes_0,
        )


def test_case_2():
    none_type_0 = None
    var_0 = module_0.intervalleftjoin(
        none_type_0,
        none_type_0,
        rkey=none_type_0,
        include_stop=none_type_0,
        lprefix=none_type_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalLeftJoinView"
    )
    assert var_0.left is None
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey is None
    assert var_0.right is None
    assert var_0.rstart == "start"
    assert var_0.rstop == "stop"
    assert var_0.rkey is None
    assert var_0.missing is None
    assert var_0.include_stop is None
    assert var_0.lprefix is None
    assert var_0.rprefix is None


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.intervalantijoin(
        none_type_0,
        none_type_0,
        lstop=none_type_0,
        lkey=none_type_0,
        rkey=none_type_0,
        include_stop=none_type_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalAntiJoinView"
    )
    assert var_0.left is None
    assert var_0.lstart == "start"
    assert var_0.lstop is None
    assert var_0.lkey is None
    assert var_0.right is None
    assert var_0.rstart == "start"
    assert var_0.rstop == "stop"
    assert var_0.rkey is None
    assert var_0.missing is None
    assert var_0.include_stop is None
    interval_join_view_0 = module_0.IntervalJoinView(
        none_type_0,
        none_type_0,
        lstop=none_type_0,
        lkey=none_type_0,
        rkey=var_0,
        lprefix=var_0,
        rprefix=none_type_0,
    )
    assert (
        f"{type(interval_join_view_0).__module__}.{type(interval_join_view_0).__qualname__}"
        == "intervals.IntervalJoinView"
    )
    assert interval_join_view_0.left is None
    assert interval_join_view_0.lstart == "start"
    assert interval_join_view_0.lstop is None
    assert interval_join_view_0.lkey is None
    assert interval_join_view_0.right is None
    assert interval_join_view_0.rstart == "start"
    assert interval_join_view_0.rstop == "stop"
    assert (
        f"{type(interval_join_view_0.rkey).__module__}.{type(interval_join_view_0.rkey).__qualname__}"
        == "intervals.IntervalAntiJoinView"
    )
    assert interval_join_view_0.include_stop is False
    assert (
        f"{type(interval_join_view_0.lprefix).__module__}.{type(interval_join_view_0.lprefix).__qualname__}"
        == "intervals.IntervalAntiJoinView"
    )
    assert interval_join_view_0.rprefix is None
    var_0.counter()


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.intervaljoinvalues(
        none_type_0, none_type_0, none_type_0, include_stop=none_type_0
    )


def test_case_5():
    bytes_0 = b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    none_type_0 = None
    var_0 = module_0.intervalsubtract(bytes_0, bytes_0, rstop=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalSubtractView"
    )
    assert var_0.left == b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey is None
    assert var_0.right == b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    assert var_0.rstart == "start"
    assert var_0.rstop is None
    assert var_0.rkey is None
    assert var_0.include_stop is False
    var_1 = var_0.__iter__()
    interval_join_view_0 = module_0.IntervalJoinView(
        none_type_0, none_type_0, none_type_0, none_type_0, var_1, none_type_0
    )
    assert (
        f"{type(interval_join_view_0).__module__}.{type(interval_join_view_0).__qualname__}"
        == "intervals.IntervalJoinView"
    )
    assert interval_join_view_0.left is None
    assert interval_join_view_0.lstart is None
    assert interval_join_view_0.lstop is None
    assert interval_join_view_0.lkey is None
    assert interval_join_view_0.right is None
    assert (
        f"{type(interval_join_view_0.rstart).__module__}.{type(interval_join_view_0.rstart).__qualname__}"
        == "builtins.generator"
    )
    assert interval_join_view_0.rstop is None
    assert interval_join_view_0.rkey is None
    assert interval_join_view_0.include_stop is False
    assert interval_join_view_0.lprefix is None
    assert interval_join_view_0.rprefix is None


@pytest.mark.xfail(strict=True)
def test_case_6():
    module_0.Interval()


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 4817.358717842874
    module_0.intervallookup(float_0)


def test_case_8():
    none_type_0 = None
    interval_tree_lookup_0 = module_0.IntervalTreeLookup(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -3545
    module_0.intervallookupone(int_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x86@"
    none_type_0 = None
    interval_tree_lookup_one_0 = module_0.IntervalTreeLookupOne(
        none_type_0, none_type_0, bytes_0
    )
    interval_tree_lookup_one_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_0.intervalrecordlookup(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.intervalrecordlookupone(none_type_0, strict=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    none_type_0 = None
    var_0 = module_0.intervalsubtract(bytes_0, bytes_0, rstop=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalSubtractView"
    )
    assert var_0.left == b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey is None
    assert var_0.right == b"\xcag\x04\\\x7f\x01j\xa5tI\xfa"
    assert var_0.rstart == "start"
    assert var_0.rstop is None
    assert var_0.rkey is None
    assert var_0.include_stop is False
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    interval_join_view_0 = module_0.IntervalJoinView(
        none_type_0, none_type_0, none_type_0, none_type_0, var_2, none_type_0
    )
    assert (
        f"{type(interval_join_view_0).__module__}.{type(interval_join_view_0).__qualname__}"
        == "intervals.IntervalJoinView"
    )
    assert interval_join_view_0.left is None
    assert interval_join_view_0.lstart is None
    assert interval_join_view_0.lstop is None
    assert interval_join_view_0.lkey is None
    assert interval_join_view_0.right is None
    assert (
        f"{type(interval_join_view_0.rstart).__module__}.{type(interval_join_view_0.rstart).__qualname__}"
        == "builtins.generator"
    )
    assert interval_join_view_0.rstop is None
    assert interval_join_view_0.rkey is None
    assert interval_join_view_0.include_stop is False
    assert interval_join_view_0.lprefix is None
    assert interval_join_view_0.rprefix is None
    interval_subtract_view_0 = module_0.IntervalSubtractView(
        interval_join_view_0, var_1, rstart=var_0
    )
    assert interval_subtract_view_0.lstart == "start"
    assert interval_subtract_view_0.lstop == "stop"
    assert interval_subtract_view_0.rstop == "stop"
    interval_subtract_view_0.len()


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 1417
    none_type_0 = None
    interval_left_join_view_0 = module_0.IntervalLeftJoinView(
        int_0,
        none_type_0,
        none_type_0,
        rstop=none_type_0,
        missing=int_0,
        lprefix=none_type_0,
    )
    assert (
        f"{type(interval_left_join_view_0).__module__}.{type(interval_left_join_view_0).__qualname__}"
        == "intervals.IntervalLeftJoinView"
    )
    assert interval_left_join_view_0.left == 1417
    assert interval_left_join_view_0.lstart is None
    assert interval_left_join_view_0.lstop == "stop"
    assert interval_left_join_view_0.lkey is None
    assert interval_left_join_view_0.right is None
    assert interval_left_join_view_0.rstart == "start"
    assert interval_left_join_view_0.rstop is None
    assert interval_left_join_view_0.rkey is None
    assert interval_left_join_view_0.missing == 1417
    assert interval_left_join_view_0.include_stop is False
    assert interval_left_join_view_0.lprefix is None
    assert interval_left_join_view_0.rprefix is None
    interval_left_join_view_0.counter()


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    interval_anti_join_view_0 = module_0.IntervalAntiJoinView(
        none_type_0, none_type_0, rkey=none_type_0, missing=none_type_0
    )
    assert (
        f"{type(interval_anti_join_view_0).__module__}.{type(interval_anti_join_view_0).__qualname__}"
        == "intervals.IntervalAntiJoinView"
    )
    assert interval_anti_join_view_0.left is None
    assert interval_anti_join_view_0.lstart == "start"
    assert interval_anti_join_view_0.lstop == "stop"
    assert interval_anti_join_view_0.lkey is None
    assert interval_anti_join_view_0.right is None
    assert interval_anti_join_view_0.rstart == "start"
    assert interval_anti_join_view_0.rstop == "stop"
    assert interval_anti_join_view_0.rkey is None
    assert interval_anti_join_view_0.missing is None
    assert interval_anti_join_view_0.include_stop is False
    interval_tree_lookup_0 = module_0.IntervalTreeLookup(none_type_0)
    interval_tree_lookup_0.search(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\xeb"
    var_0 = module_0.IntervalSubtractView(bytes_0, bytes_0, lkey=bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalSubtractView"
    )
    assert var_0.left == b"\xeb"
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey == b"\xeb"
    assert var_0.right == b"\xeb"
    assert var_0.rstart == "start"
    assert var_0.rstop == "stop"
    assert var_0.rkey is None
    assert var_0.include_stop is False
    var_1 = module_0.collapsedintervals(var_0)
    module_1.rowgroupby(var_1, var_1, var_0)


def test_case_17():
    bool_0 = True
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.intervalantijoin(none_type_0, none_type_0, lstop=bool_0, rkey=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\x86@"
    var_0 = module_0.collapsedintervals(bytes_0)
    module_1.rowgroupby(var_0, var_0)


def test_case_19():
    bytes_0 = b"\xa5o\xb4\xe3\xa0,,wL\xa7\xf6\xd3M\x10\xcb"
    bool_0 = False
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.intervaljoinvalues(
            bool_0, none_type_0, bytes_0, lstop=none_type_0, lkey=bytes_0
        )


def test_case_20():
    bool_0 = True
    bytes_0 = b"\x86@"
    bytes_1 = b"\x86@"
    with pytest.raises(AssertionError):
        module_0.intervalsubtract(bytes_1, bytes_1, bool_0, lkey=bytes_0)


def test_case_21():
    none_type_0 = None
    bytes_0 = b"\x86@"
    with pytest.raises(AssertionError):
        module_0.intervalleftjoin(
            none_type_0,
            none_type_0,
            lstop=bytes_0,
            lkey=bytes_0,
            include_stop=bytes_0,
            missing=none_type_0,
        )


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    interval_tree_lookup_0 = module_0.IntervalTreeLookup(none_type_0)
    interval_tree_lookup_0.search(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b")@"
    var_0 = module_0.collapsedintervals(bytes_0, key=bytes_0)
    module_1.rowgroupby(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\xc3l\xee\x9d\xca\x9dxE"
    module_0.intervaljoinvalues(
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        lkey=bytes_0,
        rkey=bytes_0,
        include_stop=bytes_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    interval_tree_lookup_0 = module_0.IntervalTreeLookup(none_type_0)
    var_0 = module_0.intervalleftjoin(
        none_type_0,
        none_type_0,
        rkey=none_type_0,
        include_stop=none_type_0,
        lprefix=none_type_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "intervals.IntervalLeftJoinView"
    )
    assert var_0.left is None
    assert var_0.lstart == "start"
    assert var_0.lstop == "stop"
    assert var_0.lkey is None
    assert var_0.right is None
    assert var_0.rstart == "start"
    assert var_0.rstop == "stop"
    assert var_0.rkey is None
    assert var_0.missing is None
    assert var_0.include_stop is None
    assert var_0.lprefix is None
    assert var_0.rprefix is None
    interval_tree_lookup_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b")@"
    interval_tree_lookup_0 = module_0.IntervalTreeLookup(bytes_0)
    var_0 = module_0.collapsedintervals(bytes_0, key=bytes_0)
    interval_tree_lookup_1 = module_0.IntervalTreeLookup(var_0, interval_tree_lookup_0)
    bytes_1 = b"s"
    var_1 = module_0.intervalleftjoin(
        var_0,
        var_0,
        lkey=interval_tree_lookup_0,
        rkey=var_0,
        missing=interval_tree_lookup_0,
        lprefix=bytes_1,
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "intervals.IntervalLeftJoinView"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.lstart == "start"
    assert var_1.lstop == "stop"
    assert (
        f"{type(var_1.lkey).__module__}.{type(var_1.lkey).__qualname__}"
        == "intervals.IntervalTreeLookup"
    )
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.rstart == "start"
    assert var_1.rstop == "stop"
    assert (
        f"{type(var_1.rkey).__module__}.{type(var_1.rkey).__qualname__}"
        == "builtins.generator"
    )
    assert (
        f"{type(var_1.missing).__module__}.{type(var_1.missing).__qualname__}"
        == "intervals.IntervalTreeLookup"
    )
    assert var_1.include_stop is False
    assert var_1.lprefix == b"s"
    assert var_1.rprefix is None
    interval_tree_lookup_1.search(interval_tree_lookup_0, interval_tree_lookup_0)
