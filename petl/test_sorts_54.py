# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sorts as module_0
import heapq as module_1
import petl.comparison as module_2
import petl.util.base as module_3


def test_case_0():
    var_0 = module_0.mergesort()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    merge_sort_view_0 = module_0.MergeSortView(
        var_0, var_0, presorted=var_0, tempdir=var_0
    )
    assert (
        f"{type(merge_sort_view_0).__module__}.{type(merge_sort_view_0).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert (
        f"{type(merge_sort_view_0.key).__module__}.{type(merge_sort_view_0.key).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0.key) == 1
    assert (
        f"{type(merge_sort_view_0.tables).__module__}.{type(merge_sort_view_0.tables).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0.tables) == 1
    assert merge_sort_view_0.missing is None
    assert merge_sort_view_0.header is None
    assert merge_sort_view_0.reverse is False


def test_case_1():
    int_0 = 192
    sort_view_0 = module_0.SortView(int_0)
    assert (
        f"{type(sort_view_0).__module__}.{type(sort_view_0).__qualname__}"
        == "sorts.SortView"
    )
    assert sort_view_0.source == 192
    assert sort_view_0.key is None
    assert sort_view_0.reverse is False
    assert sort_view_0.buffersize == 100000
    assert sort_view_0.tempdir is None
    assert sort_view_0.cache is True


def test_case_2():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__contains__(var_0)
    assert var_1 is False
    sort_view_0 = module_0.SortView(var_0, reverse=var_1, buffersize=var_1)
    assert len(sort_view_0) == 1
    var_2 = sort_view_0.frozenset()
    var_3 = var_0.__len__()


def test_case_3():
    str_0 = "8?#T4]>:I\x0bxAU`Q}"
    var_0 = module_0.sort(str_0, tempdir=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert len(var_0) == 16
    var_1 = var_0.__str__()
    assert (
        var_1
        == "+---+\n| 8 |\n+===+\n| \x0b |\n+---+\n| # |\n+---+\n| 4 |\n+---+\n| : |\n+---+\n| > |\n+---+\n...\n"
    )


def test_case_4():
    var_0 = module_0.mergesort()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1


def test_case_5():
    tuple_0 = ()
    named_temp_file_delete_on_g_c_0 = module_0._NamedTempFileDeleteOnGC(tuple_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    merge_sort_view_0 = module_0.MergeSortView(list_0, cache=tuple_0)
    assert (
        f"{type(merge_sort_view_0).__module__}.{type(merge_sort_view_0).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0) == 1
    var_0 = merge_sort_view_0.__contains__(tuple_0)
    assert var_0 is True


def test_case_6():
    str_0 = "s)UCo|xcz(}'*"
    var_0 = module_0.issorted(str_0, reverse=str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 192
    module_0.issorted(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    none_type_0 = None
    module_0.issorted(bool_0, none_type_0, strict=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x81#\xd6I\xaa:"
    dict_0 = module_1.merge(reverse=bytes_0)
    sort_view_0 = module_0.SortView(dict_0)
    assert (
        f"{type(sort_view_0).__module__}.{type(sort_view_0).__qualname__}"
        == "sorts.SortView"
    )
    assert len(sort_view_0) == 0
    sort_view_0.max()


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "]H=)AT\rH-\x0c$0pU"
    var_0 = module_0.sort(str_0, tempdir=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert len(var_0) == 14
    var_1 = var_0.groupby()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.groupby"
    str_0.__del__()


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 4288
    var_0 = module_0.sort(int_0, buffersize=int_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert var_0.source == 4288
    assert var_0.key is None
    assert var_0.reverse is False
    assert var_0.buffersize == 4288
    assert var_0.tempdir is None
    assert var_0.cache is True
    set_0 = {int_0, var_0, int_0, int_0}
    bytes_0 = b"\x8e.pf"
    tuple_0 = (set_0, bytes_0)
    named_temp_file_delete_on_g_c_0 = module_0._NamedTempFileDeleteOnGC(tuple_0)
    bytes_1 = b"`\xce\xb5\xc0h\x1eY\x0bR\xe3\xe0"
    module_0.issorted(bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "N{+>CHG?/5 6r"
    none_type_0 = None
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = str_0.__le__(str_0)
    merge_sort_view_0 = module_0.MergeSortView(
        var_0, reverse=var_1, presorted=none_type_0
    )
    assert (
        f"{type(merge_sort_view_0).__module__}.{type(merge_sort_view_0).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0) == 13
    var_2 = merge_sort_view_0.list()
    module_0.issorted(
        merge_sort_view_0, merge_sort_view_0, none_type_0, merge_sort_view_0
    )


@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    module_0.issorted(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    complex_0 = 16.289341 + 460.18225j
    var_0 = module_0.mergesort()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    none_type_0 = None
    merge_sort_view_0 = module_0.MergeSortView(var_0, presorted=none_type_0)
    assert (
        f"{type(merge_sort_view_0).__module__}.{type(merge_sort_view_0).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0) == 1
    merge_sort_view_1 = module_0.MergeSortView(
        merge_sort_view_0, complex_0, buffersize=complex_0
    )
    assert (
        f"{type(merge_sort_view_1).__module__}.{type(merge_sort_view_1).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert merge_sort_view_1.key == (16.289341 + 460.18225j)
    assert (
        f"{type(merge_sort_view_1.tables).__module__}.{type(merge_sort_view_1.tables).__qualname__}"
        == "builtins.list"
    )
    assert len(merge_sort_view_1.tables) == 1
    assert merge_sort_view_1.missing is None
    assert merge_sort_view_1.header is None
    assert merge_sort_view_1.reverse is False
    merge_sort_view_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_15():
    list_0 = []
    complex_0 = 16.289341 + 460.18225j
    var_0 = module_0.itermergesort(list_0, list_0, list_0, complex_0, complex_0)
    none_type_0 = None
    module_0.MergeSortView(var_0, presorted=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "]H=)AT\rH-\x0c$0pU"
    var_0 = module_0.sort(str_0, tempdir=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert len(var_0) == 14
    var_1 = var_0.groupby()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.groupby"
    var_2 = module_0.issorted(var_0, reverse=str_0, strict=var_0)
    assert var_2 is False
    str_0.__del__()


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = ".%5|"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.reduce(str_0)
    var_2 = str_0.__le__(str_0)
    none_type_0 = None
    var_3 = var_0.__eq__(str_0)
    str_1 = "7Wet"
    var_4 = module_0.issorted(str_0, reverse=none_type_0)
    assert var_4 is True
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_0._Keyed(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ".%5|"
    none_type_0 = None
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = module_0.sort(str_0, reverse=var_0)
    assert len(var_1.reverse) == 1
    assert var_1.buffersize == 100000
    var_2 = var_0.reduce(str_0)
    var_3 = str_0.__le__(str_0)
    var_4 = module_0.sort(var_3, buffersize=var_2)
    assert var_4.buffersize == (".", "%", "5", "|")
    named_temp_file_delete_on_g_c_0 = module_0._NamedTempFileDeleteOnGC(var_2)
    assert named_temp_file_delete_on_g_c_0.name == (".", "%", "5", "|")
    var_5 = module_0.issorted(str_0, reverse=var_0)
    assert var_5 is False
    var_6 = named_temp_file_delete_on_g_c_0.__repr__()
    merge_sort_view_0 = module_0.MergeSortView(
        var_0, reverse=var_3, presorted=named_temp_file_delete_on_g_c_0
    )
    assert len(merge_sort_view_0) == 4
    var_7 = merge_sort_view_0.list()
    module_0.issorted(merge_sort_view_0, var_2, none_type_0, var_2)


def test_case_19():
    str_0 = "N{+>CHG?/5 6r"
    none_type_0 = None
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = str_0.__le__(str_0)
    sort_view_0 = module_0.SortView(var_0, reverse=var_1, buffersize=var_0)
    assert len(sort_view_0.source) == 1
    assert (
        f"{type(sort_view_0.buffersize).__module__}.{type(sort_view_0.buffersize).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(sort_view_0.buffersize) == 1
    var_2 = module_0.issorted(str_0, reverse=var_0)
    assert var_2 is False
    merge_sort_view_0 = module_0.MergeSortView(var_0, reverse=var_1, presorted=var_2)
    assert len(merge_sort_view_0) == 13
    var_3 = module_0.issorted(merge_sort_view_0, var_2, none_type_0, var_2)
    assert var_3 is False


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "mcB3KK7&^lIa}A`R[&"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.set()
    var_2 = var_0.all()
    assert var_2 is True
    var_3 = str_0.__le__(str_0)
    var_4 = module_0.sort(str_0, buffersize=var_3)
    assert len(var_4) == 18
    var_5 = var_3.__str__()
    var_6 = module_0.sort(var_5, buffersize=var_2)
    assert len(var_6) == 4
    var_7 = var_6.set()
    var_8 = module_0.issorted(var_6, reverse=var_4)
    assert var_8 is False
    merge_sort_view_0 = module_0.MergeSortView(var_5, var_8, var_3, buffersize=var_6)
    assert merge_sort_view_0.key is False
    assert (
        f"{type(merge_sort_view_0.tables).__module__}.{type(merge_sort_view_0.tables).__qualname__}"
        == "builtins.list"
    )
    var_9 = var_6.list()
    module_2.comparable_itemgetter()


@pytest.mark.xfail(strict=True)
def test_case_21():
    complex_0 = 16.289341 + 460.18225j
    list_0 = [complex_0, complex_0, complex_0]
    var_0 = module_0.mergesort(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert var_0.key is None
    assert (
        f"{type(var_0.tables).__module__}.{type(var_0.tables).__qualname__}"
        == "builtins.list"
    )
    assert len(var_0.tables) == 3
    assert var_0.missing is None
    assert var_0.header is None
    assert var_0.reverse is False
    module_0.MergeSortView(var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "8?#T4]>:I\x0bxAU`Q}"
    var_0 = module_0.sort(str_0, tempdir=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert len(var_0) == 16
    var_0.permutations(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__repr__()
    assert (
        var_1
        == "+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| N | e | { | + | > | C | H | G | ; | / | 5 | g | 6 | r | E |\n+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+\n"
    )
    var_2 = str_0.__le__(str_0)
    var_3 = module_0.sort(str_0, buffersize=var_2)
    assert len(var_3) == 15
    var_4 = var_2.__str__()
    var_5 = module_0.issorted(var_3)
    assert var_5 is True
    merge_sort_view_0 = module_0.MergeSortView(
        var_0, reverse=var_1, missing=var_0, buffersize=var_4, tempdir=var_5
    )
    assert (
        f"{type(merge_sort_view_0.tables).__module__}.{type(merge_sort_view_0.tables).__qualname__}"
        == "builtins.list"
    )
    assert (
        merge_sort_view_0.reverse
        == "+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| N | e | { | + | > | C | H | G | ; | / | 5 | g | 6 | r | E |\n+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+\n"
    )
    module_3.asindices(merge_sort_view_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"<S"
    named_temp_file_delete_on_g_c_0 = module_0._NamedTempFileDeleteOnGC(bytes_0)
    var_0 = named_temp_file_delete_on_g_c_0.__str__()
    var_1 = module_0.mergesort()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_1) == 1
    var_0.__del__()


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "|z?;Sl;d"
    sort_view_0 = module_0.SortView(str_0, str_0)
    assert (
        f"{type(sort_view_0).__module__}.{type(sort_view_0).__qualname__}"
        == "sorts.SortView"
    )
    assert sort_view_0.source == "|z?;Sl;d"
    assert sort_view_0.key == "|z?;Sl;d"
    assert sort_view_0.reverse is False
    assert sort_view_0.buffersize == 100000
    assert sort_view_0.tempdir is None
    assert sort_view_0.cache is True
    var_0 = sort_view_0.clearcache()
    sort_view_0.reduce(str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    complex_0 = 16.289341 + 460.18225j
    var_0 = module_0.sort(complex_0, reverse=complex_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.SortView"
    assert var_0.source == (16.289341 + 460.18225j)
    assert var_0.key is None
    assert var_0.reverse == (16.289341 + 460.18225j)
    assert var_0.buffersize == 100000
    assert var_0.tempdir is None
    assert var_0.cache is True
    var_1 = module_0.sort(var_0, buffersize=complex_0)
    assert var_1.buffersize == (16.289341 + 460.18225j)
    none_type_0 = None
    module_0.MergeSortView(var_1, presorted=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = ".%5|"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = module_0.sort(str_0, reverse=var_0)
    assert len(var_1.reverse) == 1
    assert var_1.buffersize == 100000
    var_2 = var_0.reduce(str_0)
    str_1 = "7Wet"
    dict_0 = {str_0: var_1, str_1: var_1, str_0: var_1}
    merge_sort_view_0 = module_0.MergeSortView(dict_0, reverse=dict_0, presorted=var_2)
    assert (
        f"{type(merge_sort_view_0.tables).__module__}.{type(merge_sort_view_0.tables).__qualname__}"
        == "builtins.dict"
    )
    merge_sort_view_0.list()


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    keyed_0 = module_0._Keyed(*list_0)
    none_type_0 = None
    var_0 = module_0.itermergesort(keyed_0, none_type_0, keyed_0, none_type_0, bool_0)
    keyed_0.__ne__(none_type_0)


def test_case_29():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = module_0.sort(str_0, reverse=var_0)
    assert len(var_1.reverse) == 1
    assert var_1.buffersize == 100000
    var_2 = str_0.__le__(str_0)
    sort_view_0 = module_0.SortView(var_0, reverse=var_2, buffersize=var_1)
    assert len(sort_view_0.source) == 1
    assert (
        f"{type(sort_view_0.buffersize).__module__}.{type(sort_view_0.buffersize).__qualname__}"
        == "sorts.SortView"
    )
    var_3 = module_0.sort(var_2, buffersize=var_1)
    assert (
        f"{type(var_3.buffersize).__module__}.{type(var_3.buffersize).__qualname__}"
        == "sorts.SortView"
    )
    var_4 = var_0.__str__()
    assert (
        var_4
        == "+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| N | e | { | + | > | C | H | G | ; | / | 5 | g | 6 | r | E |\n+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+\n"
    )
    var_5 = module_0.issorted(str_0, reverse=var_0)
    assert var_5 is False
    merge_sort_view_0 = module_0.MergeSortView(var_0, reverse=var_2, presorted=var_5)
    assert len(merge_sort_view_0) == 15
    var_6 = merge_sort_view_0.list()
    var_7 = sort_view_0.__add__(var_5)
    var_8 = module_0.issorted(merge_sort_view_0, var_5, var_2, var_5)
    assert var_8 is True


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    keyed_0 = module_0._Keyed(*list_0)
    none_type_0 = None
    var_0 = module_0.itermergesort(keyed_0, none_type_0, keyed_0, none_type_0, bool_0)
    var_1 = module_0.sort(list_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sorts.SortView"
    assert var_1.source == [False, False]
    assert var_1.key is None
    assert var_1.reverse is False
    assert var_1.buffersize == 100000
    assert var_1.tempdir is None
    assert var_1.cache is True
    var_2 = var_1.clearcache()
    var_3 = var_1.__eq__(var_1)
    keyed_0.__ge__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "Ne{+>CHG;/5g6rE"
    none_type_0 = None
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__repr__()
    assert (
        var_1
        == "+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| N | e | { | + | > | C | H | G | ; | / | 5 | g | 6 | r | E |\n+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+\n"
    )
    var_2 = var_1.__le__(var_1)
    sort_view_0 = module_0.SortView(var_0, cache=none_type_0)
    assert len(sort_view_0) == 1
    var_3 = var_0.__str__()
    assert (
        var_3
        == "+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| N | e | { | + | > | C | H | G | ; | / | 5 | g | 6 | r | E |\n+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+\n"
    )
    var_4 = module_0.issorted(str_0, none_type_0)
    assert var_4 is False
    tuple_0 = (var_4,)
    merge_sort_view_0 = module_0.MergeSortView(tuple_0, reverse=tuple_0)
    assert (
        f"{type(merge_sort_view_0.tables).__module__}.{type(merge_sort_view_0.tables).__qualname__}"
        == "builtins.list"
    )
    assert merge_sort_view_0.reverse == (False,)
    var_5 = sort_view_0.list()
    var_6 = sort_view_0.cycle()
    module_0.issorted(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = str_0.__contains__(str_0)
    sort_view_0 = module_0.SortView(str_0, reverse=var_0, buffersize=var_0)
    assert (
        f"{type(sort_view_0).__module__}.{type(sort_view_0).__qualname__}"
        == "sorts.SortView"
    )
    assert len(sort_view_0) == 15
    var_1 = sort_view_0.frozenset()
    merge_sort_view_0 = module_0.MergeSortView(
        str_0, reverse=str_0, presorted=sort_view_0
    )
    assert (
        f"{type(merge_sort_view_0).__module__}.{type(merge_sort_view_0).__qualname__}"
        == "sorts.MergeSortView"
    )
    assert len(merge_sort_view_0) == 1
    module_0.issorted(merge_sort_view_0, reverse=var_1)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = str_0.__le__(str_0)
    var_1 = module_0.sort(str_0, buffersize=var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sorts.SortView"
    assert len(var_1) == 15
    var_2 = module_0.issorted(var_1, reverse=var_0)
    assert var_2 is False
    var_3 = var_1.list()
    module_2.comparable_itemgetter()


def test_case_34():
    str_0 = "Ne{+>CHG;/5g6rE"
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__contains__(var_0)
    assert var_1 is False
    sort_view_0 = module_0.SortView(var_0, reverse=var_1, buffersize=var_1)
    assert len(sort_view_0) == 1
    var_2 = sort_view_0.frozenset()
    merge_sort_view_0 = module_0.MergeSortView(
        var_0, reverse=var_0, presorted=sort_view_0
    )
    assert len(merge_sort_view_0) == 15
    var_3 = merge_sort_view_0.list()
    var_4 = sort_view_0.len()
    var_5 = var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "wSg:HD?QQ[sg]xoAY;=T"
    tuple_0 = (str_0,)
    list_0 = [str_0, tuple_0]
    var_0 = tuple_0.__lt__(tuple_0)
    keyed_0 = module_0._Keyed(*list_0)
    none_type_0 = None
    keyed_0.__gt__(none_type_0)


def test_case_36():
    str_0 = "Ne{+>CHG;/5g6rE"
    none_type_0 = None
    var_0 = module_0.mergesort(*str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sorts.MergeSortView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__contains__(str_0)
    assert var_1 is False
    sort_view_0 = module_0.SortView(str_0, buffersize=var_1, cache=none_type_0)
    assert len(sort_view_0) == 1
    with pytest.raises(ValueError):
        sort_view_0.index(var_0)
