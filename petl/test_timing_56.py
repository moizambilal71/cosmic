# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timing as module_0


def test_case_0():
    str_0 = "Z"
    var_0 = module_0.progress(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert len(var_0) == 1
    var_1 = var_0.set()


@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.progress(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert (
        f"{type(var_0.file_object).__module__}.{type(var_0.file_object).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert var_0.inner == {}
    assert var_0.batchsize == 1000
    assert var_0.prefix == ""
    var_0.__len__()


def test_case_2():
    none_type_0 = None
    var_0 = module_0.progress(none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert (
        f"{type(var_0.file_object).__module__}.{type(var_0.file_object).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert var_0.inner is None
    assert var_0.batchsize is None
    assert var_0.prefix == ""


def test_case_3():
    str_0 = "yqN(a%"
    progress_view_0 = module_0.ProgressView(str_0, str_0, str_0, str_0)
    assert (
        f"{type(progress_view_0).__module__}.{type(progress_view_0).__qualname__}"
        == "timing.ProgressView"
    )
    assert progress_view_0.file_object == "yqN(a%"
    assert progress_view_0.inner == "yqN(a%"
    assert progress_view_0.batchsize == "yqN(a%"
    assert progress_view_0.prefix == "yqN(a%"
    var_0 = progress_view_0.compress(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "itertools.compress"
    )


def test_case_4():
    none_type_0 = None
    var_0 = module_0.progress(none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert (
        f"{type(var_0.file_object).__module__}.{type(var_0.file_object).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert var_0.inner is None
    assert var_0.batchsize is None
    assert var_0.prefix == ""
    var_1 = var_0.print_message(none_type_0)


def test_case_5():
    none_type_0 = None
    progress_view_0 = module_0.ProgressView(
        none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(progress_view_0).__module__}.{type(progress_view_0).__qualname__}"
        == "timing.ProgressView"
    )
    assert (
        f"{type(progress_view_0.file_object).__module__}.{type(progress_view_0.file_object).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert progress_view_0.inner is None
    assert progress_view_0.batchsize is None
    assert progress_view_0.prefix is None
    var_0 = progress_view_0.imap(none_type_0)
    logging_progress_view_0 = module_0.LoggingProgressView(
        none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(logging_progress_view_0).__module__}.{type(logging_progress_view_0).__qualname__}"
        == "timing.LoggingProgressView"
    )
    assert (
        f"{type(logging_progress_view_0.logger).__module__}.{type(logging_progress_view_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert logging_progress_view_0.level == 20
    assert logging_progress_view_0.inner is None
    assert logging_progress_view_0.batchsize is None
    assert logging_progress_view_0.prefix is None
    var_1 = module_0.clock(none_type_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "timing.ClockView"
    assert var_1.wrapped is None
    progress_view_1 = module_0.ProgressView(var_1, none_type_0, var_1, var_1)
    assert (
        f"{type(progress_view_1.file_object).__module__}.{type(progress_view_1.file_object).__qualname__}"
        == "timing.ClockView"
    )
    assert (
        f"{type(progress_view_1.inner).__module__}.{type(progress_view_1.inner).__qualname__}"
        == "timing.ClockView"
    )
    assert progress_view_1.batchsize is None
    assert (
        f"{type(progress_view_1.prefix).__module__}.{type(progress_view_1.prefix).__qualname__}"
        == "timing.ClockView"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    var_0 = module_0.clock(dict_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ClockView"
    assert len(var_0) == 0
    var_1 = var_0.all()
    assert var_1 is True
    logging_progress_view_0 = module_0.LoggingProgressView(
        dict_0, var_1, dict_0, dict_0
    )
    assert (
        f"{type(logging_progress_view_0).__module__}.{type(logging_progress_view_0).__qualname__}"
        == "timing.LoggingProgressView"
    )
    assert logging_progress_view_0.logger == {}
    assert logging_progress_view_0.level == 20
    assert logging_progress_view_0.inner == {}
    assert logging_progress_view_0.batchsize is True
    assert logging_progress_view_0.prefix == {}
    var_0.print_message(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "Z"
    var_0 = module_0.clock(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ClockView"
    assert len(var_0) == 1
    var_0.ordereddict()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.progress(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert len(var_0) == 1
    var_1 = var_0.__len__()
    assert var_1 == 1
    var_2 = module_0.log_progress(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "timing.LoggingProgressView"
    )
    assert len(var_2) == 1
    var_1.print_message(bool_0)


def test_case_9():
    bytes_0 = b"\xed\x7f\x83\x1e\x859\x1a\x90\xb8"
    set_0 = {bytes_0, bytes_0}
    var_0 = module_0.log_progress(set_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "timing.LoggingProgressView"
    )
    assert len(var_0) == 1
    var_1 = var_0.len()
    assert var_1 == 1
    progress_view_base_0 = module_0.ProgressViewBase(bytes_0, var_1, var_0)
    assert len(progress_view_base_0) == 9
    var_2 = progress_view_base_0.__len__()
    assert var_2 == 9


def test_case_10():
    str_0 = "Z"
    var_0 = module_0.clock(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ClockView"
    assert len(var_0) == 1
    var_1 = var_0.set()


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    var_0 = module_0.progress(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert (
        f"{type(var_0.file_object).__module__}.{type(var_0.file_object).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert var_0.inner == {}
    assert var_0.batchsize == 1000
    assert var_0.prefix == ""
    var_1 = module_0.ClockView(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "timing.ClockView"
    assert (
        f"{type(var_1.wrapped).__module__}.{type(var_1.wrapped).__qualname__}"
        == "timing.ProgressView"
    )
    var_1.all()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    int_0 = -2150
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0]
    logging_progress_view_0 = module_0.LoggingProgressView(
        int_0, dict_0, bool_0, bool_0, list_0
    )
    assert (
        f"{type(logging_progress_view_0).__module__}.{type(logging_progress_view_0).__qualname__}"
        == "timing.LoggingProgressView"
    )
    assert logging_progress_view_0.logger is True
    assert logging_progress_view_0.level == [{-2150: -2150}, -2150]
    assert logging_progress_view_0.inner == -2150
    assert logging_progress_view_0.batchsize == {-2150: -2150}
    assert logging_progress_view_0.prefix is True
    var_0 = module_0.progress(list_0, out=int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timing.ProgressView"
    )
    assert var_0.file_object == -2150
    assert var_0.inner == [{-2150: -2150}, -2150]
    assert var_0.batchsize == 1000
    assert var_0.prefix == ""
    var_0.__len__()
