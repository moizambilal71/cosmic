# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpy as module_0
import petl.util.base as module_1
import petl.util.materialise as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    bool_0 = True
    module_0.construct_dtype(bool_0, bool_0, none_type_0)


def test_case_1():
    float_0 = -556.661925807224
    var_0 = module_0.construct_dtype(float_0, float_0, float_0)


def test_case_2():
    str_0 = "\\#_>O)]g0\r7C&!W"
    var_0 = module_0.construct_dtype(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "SC"
    module_0.valuestoarray(str_0, count=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "3"
    module_0.valuestoarray(str_0, str_0, sample=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.torecarray()


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -550.9608
    module_0.infer_dtype(float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xea\xbe\xc6\x01\xe0\xc5\x8d;"
    module_0.toarray(bytes_0, bytes_0)


def test_case_8():
    int_0 = 156
    var_0 = module_0.fromarray(int_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "numpy.ArrayView"
    assert var_0.a == 156


def test_case_9():
    dict_0 = {}
    var_0 = module_0.construct_dtype(dict_0, dict_0, dict_0)


def test_case_10():
    dict_0 = {}
    var_0 = module_0.construct_dtype(dict_0, dict_0, dict_0)
    var_1 = module_0.construct_dtype(dict_0, var_0, var_0)


def test_case_11():
    str_0 = "SC"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.construct_dtype(dict_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    var_0 = module_0.construct_dtype(dict_0, dict_0, dict_0)
    module_0.construct_dtype(var_0, var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "V\x0c[Wc3"
    dict_0 = module_1.iterpeek(str_0)
    var_0 = module_0.construct_dtype(dict_0, str_0, dict_0)
    dict_1 = {var_0: var_0, dict_0: dict_0, var_0: var_0}
    var_1 = module_0.construct_dtype(dict_1, str_0, dict_1)
    var_0.min()


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "SC"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.construct_dtype(dict_0, str_0, dict_0)
    var_1 = module_0.construct_dtype(var_0, str_0, str_0)
    var_2 = module_2.columns(var_1, var_0)
    assert len(var_2) == 2
    module_0.construct_dtype(var_1, var_1, var_2)
