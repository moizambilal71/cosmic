# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import re as module_0
import json as module_1
import json.decoder as module_2
import codecs as module_3
import json.encoder as module_4
import json.scanner as module_5


def test_case_0():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


def test_case_1():
    none_type_0 = None
    bool_0 = True
    module_1.load(
        none_type_0, cls=none_type_0, object_hook=none_type_0, object_pairs_hook=bool_0
    )


def test_case_2():
    bool_0 = False
    none_type_0 = None
    module_2.JSONObject(bool_0, bool_0, bool_0, none_type_0, none_type_0, _ws=bool_0)


def test_case_3():
    bool_0 = True
    str_0 = "M\x0c0BaW zXf"
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: bool_0}
    dict_0.scan(dict_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    module_1.loads(bool_0, cls=bool_0, object_hook=bool_0, parse_int=none_type_0)


def test_case_5():
    none_type_0 = None
    module_1.detect_encoding(none_type_0)


def test_case_6():
    none_type_0 = None
    module_1.dump(
        none_type_0,
        none_type_0,
        skipkeys=none_type_0,
        indent=none_type_0,
        default=none_type_0,
    )


def test_case_7():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_8():
    none_type_0 = None
    module_1.load(none_type_0, cls=none_type_0, object_hook=none_type_0)


def test_case_9():
    int_0 = 1174
    none_type_0 = None
    module_1.dump(int_0, none_type_0, skipkeys=none_type_0, check_circular=none_type_0)


def test_case_10():
    bytes_0 = b"'2\x9de<\x17iu"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_2.JSONObject(bytes_0, bytes_0, set_0, bytes_0, set_0, _w=bytes_0, _ws=set_0)


def test_case_11():
    bytes_0 = b"&U.\x81\x8e`)7\xd8\x82J\x0f\xe6"
    bool_0 = False
    none_type_0 = None
    var_0 = module_3.iterencode(bytes_0, bool_0, bool_0)
    var_0.writelines(none_type_0)


def test_case_12():
    bytes_0 = b"U\xe7PL\xf0\xf5\xf0\xe31\xd1\xb0\xfb\x87-"
    dict_0 = {}
    module_1.dumps(
        bytes_0, ensure_ascii=bytes_0, cls=bytes_0, separators=bytes_0, **dict_0
    )


def test_case_13():
    none_type_0 = None
    module_1.dump(none_type_0, none_type_0)


def test_case_14():
    bool_0 = False
    module_3.getencoder(bool_0)


def test_case_15():
    int_0 = 3362
    module_1.load(int_0, parse_int=int_0, parse_constant=int_0)


def test_case_16():
    none_type_0 = None
    module_4.py_encode_basestring_ascii(none_type_0)


def test_case_17():
    var_0 = module_0.purge()
    var_0.__exit__(var_0, var_0, var_0)


def test_case_18():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_19():
    str_0 = "P!bV}k(9?XS~;r"
    var_0 = module_0.purge()
    module_1.dumps(
        var_0,
        skipkeys=var_0,
        ensure_ascii=str_0,
        allow_nan=var_0,
        indent=str_0,
        **var_0
    )


def test_case_20():
    int_0 = 7
    none_type_0 = None
    module_1.dump(
        int_0,
        int_0,
        cls=int_0,
        indent=none_type_0,
        separators=none_type_0,
        default=none_type_0,
        sort_keys=none_type_0,
    )


def test_case_21():
    bytes_0 = b"\xf2\x19\xcdV\x0ee"
    module_1.load(bytes_0, parse_float=bytes_0, parse_int=bytes_0)


def test_case_22():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_23():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.detect_encoding(none_type_0)


def test_case_24():
    bool_0 = True
    module_1.detect_encoding(bool_0)


def test_case_25():
    none_type_0 = None
    module_5.py_make_scanner(none_type_0)


def test_case_26():
    none_type_0 = None
    module_1.dump(
        none_type_0,
        none_type_0,
        ensure_ascii=none_type_0,
        allow_nan=none_type_0,
        indent=none_type_0,
        separators=none_type_0,
        sort_keys=none_type_0,
    )


def test_case_27():
    none_type_0 = None
    module_1.loads(none_type_0, parse_int=none_type_0)


def test_case_28():
    none_type_0 = None
    var_0 = module_1.dumps(
        none_type_0,
        skipkeys=none_type_0,
        ensure_ascii=none_type_0,
        check_circular=none_type_0,
        indent=none_type_0,
        sort_keys=none_type_0,
    )
    module_0.search(none_type_0, none_type_0)


def test_case_29():
    var_0 = module_0.purge()
    var_0.__next__()


def test_case_30():
    none_type_0 = None
    module_1.load(none_type_0, parse_constant=none_type_0)


def test_case_31():
    none_type_0 = None
    module_1.loads(none_type_0, object_pairs_hook=none_type_0)


def test_case_32():
    none_type_0 = None
    module_1.load(none_type_0, parse_constant=none_type_0)


def test_case_33():
    none_type_0 = None
    module_4.py_encode_basestring(none_type_0)


def test_case_34():
    int_0 = -52
    none_type_0 = None
    str_0 = "U^C5n0, \x0c"
    str_1 = "#1f9Z/ /Tvq"
    dict_0 = {str_0: none_type_0, str_1: str_0}
    module_1.load(
        int_0,
        cls=int_0,
        parse_float=none_type_0,
        parse_int=int_0,
        parse_constant=int_0,
        object_pairs_hook=none_type_0,
        **dict_0
    )


def test_case_35():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


def test_case_36():
    var_0 = module_0.purge()
    var_0.write(var_0)


def test_case_37():
    none_type_0 = None
    module_1.detect_encoding(none_type_0)


def test_case_38():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    module_1.dump(bool_0, bool_1, skipkeys=none_type_0)


def test_case_39():
    float_0 = 5350.2
    module_1.dumps(
        float_0, cls=float_0, separators=float_0, sort_keys=float_0, **float_0
    )


def test_case_40():
    int_0 = -1272
    module_1.detect_encoding(int_0)


def test_case_41():
    bytes_0 = b"Y\x8d\xe3D\x98"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_1.load(
        dict_0, parse_float=dict_0, parse_int=none_type_0, object_pairs_hook=dict_0
    )


def test_case_42():
    none_type_0 = None
    module_1.load(none_type_0, parse_int=none_type_0)


def test_case_43():
    none_type_0 = None
    var_0 = module_1.dumps(none_type_0, allow_nan=none_type_0, default=none_type_0)
    module_1.load(
        none_type_0,
        cls=none_type_0,
        object_hook=none_type_0,
        parse_constant=none_type_0,
        object_pairs_hook=none_type_0,
    )


def test_case_44():
    none_type_0 = None
    module_1.loads(none_type_0, object_hook=none_type_0)


def test_case_45():
    none_type_0 = None
    module_1.detect_encoding(none_type_0)


def test_case_46():
    none_type_0 = None
    module_3.EncodedFile(none_type_0, none_type_0)


def test_case_47():
    bytes_0 = b"\xd0b\t9FiQ"
    var_0 = module_1.detect_encoding(bytes_0)
    module_1.dump(
        var_0,
        var_0,
        skipkeys=var_0,
        ensure_ascii=bytes_0,
        check_circular=var_0,
        allow_nan=var_0,
        separators=bytes_0,
        sort_keys=var_0,
        **bytes_0
    )


def test_case_48():
    float_0 = -2376.484
    none_type_0 = None
    module_1.dump(
        float_0,
        float_0,
        check_circular=float_0,
        separators=float_0,
        default=none_type_0,
        sort_keys=none_type_0,
    )


def test_case_49():
    float_0 = 464.592
    module_3.open(float_0, float_0)
