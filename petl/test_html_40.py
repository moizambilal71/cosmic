# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import html as module_1
import enum as module_2
import builtins as module_3
import locale as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -3795.4
    str_0 = "/\\93KH6?\x0c^\tt8"
    module_0.finditer(float_0, float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_1.escape(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_1.escape(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    bool_0 = False
    module_0.findall(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -62
    module_1.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xf3\x95\xb9\xd9)\x98\x92"
    module_1.unescape(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_1.escape(none_type_0)


def test_case_12():
    bool_0 = True
    set_0 = {bool_0}
    var_0 = module_1.unescape(set_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.purge()
    module_1.unescape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    dict_0 = {}
    module_1.escape(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "jPxd3XLxw1!\x0cg`I:Qy"
    module_0.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    module_1.unescape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    float_0 = -1910.2134
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\xbc\x88\xaaV\xc6"
    module_1.unescape(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_0 = {}
    var_0 = module_1.unescape(dict_0)
    var_1 = module_1.unescape(dict_0)
    module_1.escape(dict_0)


def test_case_29():
    bool_0 = False
    error_0 = module_4.Error()
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, error_0, error_0, error_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    module_1.escape(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    error_0 = module_4.Error()
    module_1.unescape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_1.escape(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    module_1.escape(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "(Afu|z|G?nM10p\n^$]Z"
    var_0 = module_1.unescape(str_0)
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    exception_0 = module_3.Exception()
    module_1.unescape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_1.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    module_1.escape(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    module_1.escape(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    none_type_0 = None
    module_1.unescape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    var_0 = module_0.purge()
    module_1.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = "F%:oP<&?Js'_ab)xWW"
    var_0 = module_1.unescape(str_0)
    assert var_0 == "F%:oP<&?Js'_ab)xWW"
    bool_0 = False
    module_1.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bytes_0 = b"\xdbj\x96\xf60:\x9c<\xa79"
    var_0 = module_0.template(bytes_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    module_0.escape(exception_0)
