# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lookups as module_0
import petl.errors as module_1
import petl.util.base as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    module_0.lookup(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    module_0.lookup(tuple_0, tuple_0, dictionary=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.lookupone(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.dictlookup(set_0, set_0)


def test_case_4():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.dictlookup(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.dictlookupone(none_type_0, none_type_0, strict=none_type_0)


def test_case_6():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.dictlookupone(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.recordlookup(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "au8)wG{"
    module_0.recordlookup(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.recordlookupone(none_type_0, none_type_0)


def test_case_10():
    str_0 = "\x0b"
    var_0 = module_0.lookupone(str_0, str_0, str_0, str_0)
    assert var_0 == "\x0b"


def test_case_11():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.dictlookup(tuple_0, tuple_0)


def test_case_12():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.recordlookupone(tuple_0, tuple_0, strict=tuple_0)


def test_case_13():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.recordlookupone(tuple_0, tuple_0, tuple_0)


def test_case_14():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.recordlookup(tuple_0, tuple_0)


def test_case_15():
    str_0 = "\x0b"
    var_0 = module_0.dictlookup(str_0, str_0)


def test_case_16():
    str_0 = "\x0b"
    var_0 = module_0.recordlookup(str_0, str_0)


def test_case_17():
    tuple_0 = ()
    int_0 = -232
    var_0 = module_0.recordlookupone(tuple_0, int_0, tuple_0, tuple_0)


def test_case_18():
    str_0 = "\r"
    var_0 = module_0.dictlookupone(str_0, str_0)


def test_case_19():
    str_0 = "\x0b"
    var_0 = module_0.lookup(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "\x0b"
    var_0 = module_0.dictlookup(str_0, str_0)
    var_1 = module_0.dictlookupone(str_0, str_0)
    int_0 = -232
    bool_0 = False
    tuple_0 = (var_0, var_1, var_1, bool_0)
    module_0.recordlookupone(tuple_0, int_0, bool_0, var_1)


def test_case_21():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = var_0.__add__(var_0)
    assert var_1 == "\x0b\x0b"
    var_2 = module_0.lookupone(str_0, str_0, str_0, var_1)
    assert var_2 == "\x0b\x0b"
    var_3 = module_0.dictlookup(str_0, var_0)
    var_4 = module_0.recordlookup(var_0, var_0, var_1)
    assert var_4 == "\x0b\x0b"
    var_5 = module_0.recordlookup(var_1, str_0)
    var_6 = module_0.lookup(str_0, var_0)
    var_7 = module_0.dictlookupone(var_4, var_0, str_0)
    assert var_7 == "\x0b"
    var_8 = module_0.recordlookupone(var_1, var_7)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = var_0.__add__(var_0)
    assert var_1 == "\x0b\x0b"
    var_2 = module_0.recordlookup(var_0, var_0, var_1)
    assert var_2 == "\x0b\x0b"
    var_3 = module_0.recordlookup(var_1, str_0)
    var_4 = module_0.lookup(str_0, var_0)
    var_5 = module_0.dictlookup(var_1, var_0)
    var_1.any()


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "q{atu.eYnC[O,<[xj"
    bool_0 = False
    var_0 = module_0.recordlookupone(str_0, bool_0, str_0)
    assert var_0 == "q{atu.eYnC[O,<[xj"
    module_0.recordlookupone(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = module_0.lookup(var_0, str_0, dictionary=str_0)
    assert var_1 == "\x0b"
    var_2 = module_0.dictlookupone(str_0, str_0)
    var_3 = module_0.lookupone(str_0, str_0, str_0, var_2)
    var_4 = module_0.dictlookup(var_0, var_0)
    tuple_0 = ()
    int_0 = -1584
    var_5 = module_0.dictlookupone(tuple_0, int_0)
    int_1 = -232
    var_6 = module_0.recordlookup(var_3, int_1)
    module_0.lookupone(str_0, var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = module_0.lookup(var_0, str_0, dictionary=str_0)
    assert var_1 == "\x0b"
    var_2 = module_0.dictlookup(var_0, var_0)
    tuple_0 = ()
    str_1 = "\rky%D4'NG@p|qL"
    var_3 = tuple_0.__contains__(var_1)
    set_0 = {str_1, var_0}
    var_4 = module_0.dictlookupone(str_1, var_3, strict=set_0)
    var_5 = module_0.recordlookup(var_4, var_3)
    var_5.izip(**var_2)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = var_0.__add__(var_0)
    assert var_1 == "\x0b\x0b"
    var_2 = module_0.lookup(str_0, var_0)
    var_3 = module_0.dictlookup(var_1, var_0)
    var_1.any()


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = var_0.__add__(var_0)
    assert var_1 == "\x0b\x0b"
    var_2 = module_0.lookupone(var_1, var_0, dictionary=str_0)
    assert var_2 == "\x0b"
    var_1.any()


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = var_0.__add__(var_0)
    assert var_1 == "\x0b\x0b"
    var_2 = module_0.lookupone(str_0, str_0, str_0, var_1)
    assert var_2 == "\x0b\x0b"
    var_3 = module_0.dictlookup(str_0, var_0)
    var_4 = module_0.recordlookup(var_0, var_0, var_1)
    assert var_4 == "\x0b\x0b"
    var_5 = module_0.recordlookup(var_1, str_0)
    var_6 = module_0.lookup(str_0, var_0)
    var_7 = module_0.dictlookupone(var_4, var_0, str_0)
    assert var_7 == "\x0b"
    module_0.recordlookup(var_4, var_0, str_0)


def test_case_29():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    var_1 = module_0.lookup(var_0, str_0, dictionary=str_0)
    assert var_1 == "\x0b"
    var_2 = module_0.lookupone(str_0, str_0, str_0, str_0)
    assert var_2 == "\x0b"
    none_type_0 = None
    var_3 = module_0.lookup(var_1, var_2, none_type_0)
    var_4 = module_0.dictlookup(var_0, var_0)
    tuple_0 = ()
    str_1 = 'tSp k.b([9IFh/"Y"^Re'
    var_5 = tuple_0.__contains__(var_1)
    set_0 = {str_1, var_0}
    with pytest.raises(module_1.DuplicateKeyError):
        module_0.dictlookupone(str_1, var_5, strict=set_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0)
    var_1 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_1 == "\x0b"
    var_2 = var_1.__add__(var_1)
    assert var_2 == "\x0b\x0b"
    var_3 = module_0.lookupone(str_0, str_0, str_0, var_2)
    assert var_3 == "\x0b\x0b"
    var_4 = module_0.dictlookup(str_0, var_1)
    var_5 = module_0.recordlookup(var_1, var_1, var_2)
    assert var_5 == "\x0b\x0b"
    var_6 = module_0.recordlookup(var_2, str_0)
    var_7 = module_0.lookup(str_0, var_1)
    var_8 = module_0.dictlookupone(var_5, var_1, str_0)
    assert var_8 == "\x0b"
    var_9 = module_0.recordlookupone(var_3, str_0)
    var_10 = var_7.__len__()
    assert var_10 == 0
    var_11 = module_0.dictlookup(var_5, str_0, var_6)
    var_12 = module_0.recordlookupone(var_3, var_8, var_11)
    var_10.izip(**var_11)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    list_0 = [str_0, str_0]
    var_1 = module_0.lookupone(list_0, str_0, strict=var_0)
    var_2 = module_0.lookup(var_0, str_0, dictionary=str_0)
    assert var_2 == "\x0b"
    var_3 = module_0.dictlookupone(str_0, str_0)
    var_4 = module_0.recordlookupone(list_0, var_0, strict=var_0)
    var_5 = module_0.dictlookup(var_0, var_0)
    int_0 = -1535
    var_6 = module_0.dictlookupone(var_3, int_0)
    int_1 = -219
    var_7 = module_0.recordlookup(var_4, int_1)
    var_8 = module_0.lookupone(var_5, int_0, strict=var_1)
    var_9 = module_0.dictlookup(var_4, int_0, var_2)
    assert var_9 == "\x0b"
    module_0.recordlookupone(var_4, var_8, strict=int_0)


def test_case_32():
    str_0 = "\x0b"
    list_0 = [str_0, str_0, str_0]
    with pytest.raises(module_1.DuplicateKeyError):
        module_0.recordlookupone(list_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    list_0 = [str_0, str_0]
    var_1 = module_0.lookupone(list_0, str_0, strict=var_0)
    var_2 = module_0.dictlookupone(str_0, str_0)
    var_3 = module_0.lookupone(str_0, str_0, str_0, var_2)
    var_4 = module_0.dictlookup(var_0, var_0)
    int_0 = -1535
    var_5 = module_0.dictlookupone(var_2, int_0)
    var_6 = module_0.lookupone(var_4, int_0, strict=var_1)
    var_7 = module_0.dictlookup(var_3, int_0, var_3)
    module_0.recordlookupone(var_3, var_6, strict=int_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    list_0 = [str_0, str_0]
    var_1 = module_0.lookupone(list_0, str_0, strict=var_0)
    var_2 = module_0.lookup(list_0, str_0, var_0)
    module_0.dictlookupone(var_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "\x0b"
    list_0 = [str_0, str_0]
    var_0 = module_0.lookupone(list_0, str_0, strict=list_0)
    module_0.lookup(list_0, str_0, dictionary=str_0)


def test_case_36():
    str_0 = "0"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "0"
    list_0 = [str_0, str_0, str_0, var_0]
    with pytest.raises(module_1.DuplicateKeyError):
        module_0.lookupone(list_0, str_0, strict=var_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "\x0b"
    var_0 = module_0.recordlookupone(str_0, str_0, str_0)
    assert var_0 == "\x0b"
    list_0 = [str_0]
    var_1 = module_2.Table()
    var_2 = module_0.dictlookupone(str_0, str_0)
    var_3 = var_1.__add__(list_0)
    var_4 = module_0.dictlookup(var_0, var_0)
    int_0 = -1535
    var_5 = module_0.dictlookupone(var_2, int_0)
    int_1 = -219
    module_0.recordlookup(var_3, int_1)
