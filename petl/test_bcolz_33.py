# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bcolz as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.frombcolz(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bcolz.BcolzView"
    assert var_0.source is None
    assert var_0.expression is None
    assert var_0.outcols is None
    assert var_0.limit is None
    assert var_0.skip == 0
    var_0.set()


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ".?umb@|D"
    var_0 = module_0.frombcolz(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bcolz.BcolzView"
    assert var_0.source == ".?umb@|D"
    assert var_0.expression is None
    assert var_0.outcols is None
    assert var_0.limit is None
    assert var_0.skip == 0
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.appendbcolz(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ".?umb@|D"
    module_0.appendbcolz(str_0, str_0)


def test_case_3():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.appendbcolz(bool_0, bool_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_0.frombcolz(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bcolz.BcolzView"
    assert var_0.source is None
    assert var_0.expression is None
    assert var_0.outcols is None
    assert var_0.limit is None
    assert var_0.skip == 0


def test_case_5():
    list_0 = []
    with pytest.raises(AssertionError):
        module_0.appendbcolz(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    var_0 = module_0.BcolzView(bool_0, outcols=bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bcolz.BcolzView"
    assert var_0.source is True
    assert var_0.expression is None
    assert var_0.outcols is True
    assert var_0.limit is None
    assert var_0.skip == 0
    var_0.tuple()


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 295
    str_0 = '1)4g"\x0bo;T}h>5'
    var_0 = module_0.frombcolz(int_0, outcols=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bcolz.BcolzView"
    assert var_0.source == 295
    assert var_0.expression is None
    assert var_0.outcols == '1)4g"\x0bo;T}h>5'
    assert var_0.limit is None
    assert var_0.skip == 0
    var_0.izip(*var_0)


def test_case_8():
    list_0 = []
    bcolz_view_0 = module_0.BcolzView(list_0, outcols=list_0, limit=list_0)
    assert (
        f"{type(bcolz_view_0).__module__}.{type(bcolz_view_0).__qualname__}"
        == "bcolz.BcolzView"
    )
    assert bcolz_view_0.source == []
    assert bcolz_view_0.expression is None
    assert bcolz_view_0.outcols == []
    assert bcolz_view_0.limit == []
    assert bcolz_view_0.skip == 0
    var_0 = bcolz_view_0.all()
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    bcolz_view_0 = module_0.BcolzView(list_0, outcols=list_0, limit=list_0)
    assert (
        f"{type(bcolz_view_0).__module__}.{type(bcolz_view_0).__qualname__}"
        == "bcolz.BcolzView"
    )
    assert bcolz_view_0.source == []
    assert bcolz_view_0.expression is None
    assert bcolz_view_0.outcols == []
    assert bcolz_view_0.limit == []
    assert bcolz_view_0.skip == 0
    module_0.appendbcolz(list_0, bcolz_view_0, bcolz_view_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    bcolz_view_0 = module_0.BcolzView(tuple_0, tuple_0, tuple_0)
    assert (
        f"{type(bcolz_view_0).__module__}.{type(bcolz_view_0).__qualname__}"
        == "bcolz.BcolzView"
    )
    assert bcolz_view_0.source == ()
    assert bcolz_view_0.expression == ()
    assert bcolz_view_0.outcols == ()
    assert bcolz_view_0.limit is None
    assert bcolz_view_0.skip == 0
    str_0 = "o4\x0cNZ27EY'm,B"
    var_0 = bcolz_view_0.__iter__()
    module_0.appendbcolz(str_0, bcolz_view_0)
