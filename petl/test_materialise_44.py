# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import materialise as module_0
import petl.util.base as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'pde9J\\\rWx/V2D2^Lg5"h'
    var_0 = module_0.cache(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(var_0) == 20
    int_0 = -3395
    var_1 = var_0.chain()
    var_2 = module_0.cache(int_0, int_0)
    var_3 = var_1.__iter__()
    cache_view_0 = module_0.CacheView(var_1)
    assert len(cache_view_0) == 20
    var_4 = module_0.listoflists(cache_view_0)
    var_5 = module_0.columns(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_5) == 0
    module_0.facetcolumns(var_3, var_1)


def test_case_1():
    bytes_0 = b""
    var_0 = module_0.listoflists(bytes_0)
    with pytest.raises(AssertionError):
        module_0.facetcolumns(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "pde9J\rW'/V2\r2Lg5ch"
    var_0 = module_0.tupleoftuples(str_0)
    iter_container_0 = module_1.IterContainer()
    bool_0 = False
    var_1 = module_0.facetcolumns(str_0, bool_0)
    var_0.starmap(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'pde9J\\\rWx/V2D2^Lg5"h'
    var_0 = module_0.listoftuples(str_0)
    int_0 = -3395
    var_1 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_1.inner == -3395
    assert var_1.n == -3395
    assert var_1.cache == []
    assert var_1.cachecomplete is False
    var_2 = var_1.takewhile(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.takewhile"
    )
    bytes_0 = b"\x0b\xca&\xdag6\xfe\xfeo\xd4w\xaf5\x84"
    cache_view_0 = module_0.CacheView(bytes_0)
    assert len(cache_view_0) == 14
    var_3 = module_0.columns(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_3) == 1
    bytes_1 = b"\xb4"
    module_0.facetcolumns(var_1, bytes_1, var_1)


def test_case_4():
    str_0 = "pde9J\rW'/V2\r2Lg5ch"
    var_0 = module_0.tupleoflists(str_0)
    iter_container_0 = module_1.IterContainer()
    bool_0 = False
    var_1 = module_0.facetcolumns(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.cache(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner is None
    assert var_0.n is None
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    var_0.permutations()


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.tupleoftuples(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -3431
    var_0 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner == -3431
    assert var_0.n == -3431
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    var_1 = var_0.takewhile(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.takewhile"
    )
    var_2 = var_0.__iter__()
    bytes_0 = b""
    var_3 = module_0.listoftuples(bytes_0)
    bytes_1 = b""
    module_0.facetcolumns(bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "o}+"
    var_0 = module_0.cache(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(var_0) == 3
    bool_0 = True
    module_0.tupleoflists(bool_0)


def test_case_9():
    none_type_0 = None
    cache_view_0 = module_0.CacheView(none_type_0)
    assert (
        f"{type(cache_view_0).__module__}.{type(cache_view_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert cache_view_0.inner is None
    assert cache_view_0.n is None
    assert cache_view_0.cache == []
    assert cache_view_0.cachecomplete is False


def test_case_10():
    int_0 = -3395
    var_0 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner == -3395
    assert var_0.n == -3395
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    var_1 = var_0.takewhile(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.takewhile"
    )
    var_2 = var_1.__iter__()
    bytes_0 = b""
    cache_view_0 = var_0.clearcache()
    var_3 = module_0.facetcolumns(bytes_0, int_0, var_1)


def test_case_11():
    str_0 = "hv"
    var_0 = module_0.columns(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_0) == 1


def test_case_12():
    bytes_0 = b""
    var_0 = module_0.columns(bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_0) == 0
    var_1 = module_0.listoflists(bytes_0)
    str_0 = "'g"
    with pytest.raises(AssertionError):
        module_0.facetcolumns(str_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xf9?xNm{\x8f(p\xba\x88\xa3"
    cache_view_0 = module_0.cache(bytes_0)
    assert (
        f"{type(cache_view_0).__module__}.{type(cache_view_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(cache_view_0) == 12
    cache_view_0.ordereddict()


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'pde9J\\\rWx/V2D2^Lg5"h'
    var_0 = module_0.cache(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(var_0) == 20
    var_1 = var_0.compress(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.compress"
    )
    var_2 = var_1.__iter__()
    bytes_0 = b""
    cache_view_0 = module_0.CacheView(bytes_0)
    assert len(cache_view_0) == 0
    var_3 = module_0.columns(str_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_3) == 1
    var_4 = var_0.takewhile(var_2)
    module_0.facetcolumns(cache_view_0, str_0)


def test_case_15():
    int_0 = -3395
    bytes_0 = b""
    cache_view_0 = module_0.CacheView(bytes_0, int_0)
    assert (
        f"{type(cache_view_0).__module__}.{type(cache_view_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(cache_view_0) == 0
    var_0 = module_0.columns(cache_view_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_0) == 0
    var_1 = module_0.facetcolumns(bytes_0, int_0, var_0)
    var_2 = module_0.cache(int_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -3429
    var_0 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner == -3429
    assert var_0.n == -3429
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    var_1 = var_0.takewhile(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.takewhile"
    )
    var_2 = var_1.__iter__()
    bytes_0 = b"\xaf\x87\xe7"
    cache_view_0 = module_0.CacheView(bytes_0, int_0)
    assert len(cache_view_0) == 3
    module_0.columns(cache_view_0)


def test_case_17():
    str_0 = "pde9J\rW'/V2\r2Lg5ch"
    bool_0 = False
    var_0 = module_0.facetcolumns(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'pde9J\\\rWx/V2D2^Lg5"h'
    var_0 = module_0.cache(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(var_0) == 20
    var_1 = module_0.cache(var_0, var_0)
    assert len(var_1.inner) == 20
    assert len(var_1.n) == 20
    var_2 = var_1.takewhile(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.takewhile"
    )
    var_3 = var_2.__iter__()
    module_0.columns(var_2)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -720
    var_0 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner == -720
    assert var_0.n == -720
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    bytes_0 = b""
    cache_view_0 = module_0.CacheView(bytes_0, int_0)
    assert len(cache_view_0) == 0
    var_1 = module_0.columns(cache_view_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_1) == 0
    module_0.facetcolumns(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 910
    var_0 = module_0.cache(int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert var_0.inner == 910
    assert var_0.n == 910
    assert var_0.cache == []
    assert var_0.cachecomplete is False
    var_1 = var_0.takewhile(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.takewhile"
    )
    var_2 = var_1.__iter__()
    bytes_0 = b""
    cache_view_0 = module_0.CacheView(bytes_0, int_0)
    assert len(cache_view_0) == 0
    var_3 = module_0.columns(cache_view_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_3) == 0
    module_0.facetcolumns(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'pde9J\\\rWx/V2D2^Lg5"h'
    cache_view_0 = module_0.CacheView(str_0, str_0)
    assert (
        f"{type(cache_view_0).__module__}.{type(cache_view_0).__qualname__}"
        == "materialise.CacheView"
    )
    assert cache_view_0.inner == 'pde9J\\\rWx/V2D2^Lg5"h'
    assert cache_view_0.n == 'pde9J\\\rWx/V2D2^Lg5"h'
    assert cache_view_0.cache == []
    assert cache_view_0.cachecomplete is False
    var_0 = module_0.listoftuples(str_0)
    bool_0 = True
    var_1 = module_0.cache(str_0, bool_0)
    assert len(var_1) == 20
    int_0 = -3395
    var_2 = module_0.cache(str_0, int_0)
    assert len(var_2) == 20
    var_1.reduce(var_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "pde9J\\\rW'/V2\r2^Lg5ch"
    var_0 = module_0.tupleoflists(str_0)
    str_1 = "]@4g"
    str_2 = "(gIp\n&o(7hQGs<w$Vgc}"
    tuple_0 = (str_1, var_0, var_0, str_2)
    var_1 = module_0.columns(tuple_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_1) == 4
    var_2 = module_0.cache(tuple_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "materialise.CacheView"
    )
    assert len(var_2) == 4
    var_3 = var_2.takewhile(tuple_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "itertools.takewhile"
    )
    var_4 = var_1.__iter__()
    cache_view_0 = module_0.CacheView(tuple_0)
    assert len(cache_view_0) == 4
    var_5 = module_0.columns(str_0)
    assert len(var_5) == 1
    var_6 = cache_view_0.map(var_2)
    var_4.compress(var_6)
