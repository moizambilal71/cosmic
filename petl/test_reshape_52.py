# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reshape as module_0
import petl.util.base as module_1


def test_case_0():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, variables=str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = var_0.__len__()
    assert var_1 == 1


def test_case_1():
    bool_0 = False
    none_type_0 = None
    flatten_view_0 = module_0.FlattenView(bool_0)
    assert (
        f"{type(flatten_view_0).__module__}.{type(flatten_view_0).__qualname__}"
        == "reshape.FlattenView"
    )
    assert flatten_view_0.table is False
    var_0 = module_0.itermelt(bool_0, bool_0, bool_0, none_type_0, none_type_0)
    recast_view_0 = module_0.RecastView(var_0, samplesize=flatten_view_0)
    assert (
        f"{type(recast_view_0).__module__}.{type(recast_view_0).__qualname__}"
        == "reshape.RecastView"
    )
    assert (
        f"{type(recast_view_0.source).__module__}.{type(recast_view_0.source).__qualname__}"
        == "builtins.generator"
    )
    assert recast_view_0.key is None
    assert recast_view_0.variablefield == "variable"
    assert recast_view_0.valuefield == "value"
    assert (
        f"{type(recast_view_0.samplesize).__module__}.{type(recast_view_0.samplesize).__qualname__}"
        == "reshape.FlattenView"
    )
    assert recast_view_0.reducers == {}
    assert recast_view_0.missing is None


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "F"
    var_0 = module_0.recast(str_0, variablefield=str_0, reducers=str_0, missing=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.RecastView"
    )
    assert var_0.source == "F"
    assert var_0.key is None
    assert var_0.variablefield == "F"
    assert var_0.valuefield == "value"
    assert var_0.samplesize == 1000
    assert var_0.reducers == "F"
    assert var_0.missing == "F"
    var_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.source) == 1
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.key) == 1
    assert var_1.variablefield == "variable"
    assert var_1.valuefield == "value"
    assert var_1.samplesize == 1000
    assert var_1.reducers == {}
    assert var_1.missing is None
    var_1.all()


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    pivot_view_0 = module_0.PivotView(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        buffersize=none_type_0,
        cache=none_type_0,
    )
    assert (
        f"{type(pivot_view_0).__module__}.{type(pivot_view_0).__qualname__}"
        == "reshape.PivotView"
    )
    assert (
        f"{type(pivot_view_0.source).__module__}.{type(pivot_view_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert pivot_view_0.f1 is None
    assert pivot_view_0.f2 is None
    assert pivot_view_0.f3 is None
    assert pivot_view_0.aggfun is None
    assert pivot_view_0.missing is None
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(
        var_0, variablefield=str_0, valuefield=str_1, samplesize=str_0, reducers=var_0
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.source) == 1
    assert var_1.key is None
    assert var_1.variablefield == "F"
    assert var_1.valuefield == ""
    assert var_1.samplesize == "F"
    assert (
        f"{type(var_1.reducers).__module__}.{type(var_1.reducers).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.reducers) == 1
    assert var_1.missing is None
    var_1.product()


def test_case_5():
    float_0 = 1942.5781
    list_0 = [float_0, float_0]
    unflatten_view_0 = module_0.UnflattenView(*list_0)
    assert (
        f"{type(unflatten_view_0).__module__}.{type(unflatten_view_0).__qualname__}"
        == "reshape.UnflattenView"
    )
    assert unflatten_view_0.input == pytest.approx(1942.5781, abs=0.01, rel=0.01)
    assert unflatten_view_0.period == pytest.approx(1942.5781, abs=0.01, rel=0.01)
    assert unflatten_view_0.missing is None


@pytest.mark.xfail(strict=True)
def test_case_6():
    module_0.unflatten()


def test_case_7():
    str_0 = "/"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    pivot_view_0 = module_0.PivotView(
        str_0, var_0, str_0, str_0, var_0, var_0, var_0, tempdir=var_0, cache=var_0
    )
    assert (
        f"{type(pivot_view_0).__module__}.{type(pivot_view_0).__qualname__}"
        == "reshape.PivotView"
    )
    assert pivot_view_0.source == "/"
    assert (
        f"{type(pivot_view_0.f1).__module__}.{type(pivot_view_0.f1).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(pivot_view_0.f1) == 1
    assert pivot_view_0.f2 == "/"
    assert pivot_view_0.f3 == "/"
    assert (
        f"{type(pivot_view_0.aggfun).__module__}.{type(pivot_view_0.aggfun).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(pivot_view_0.aggfun) == 1
    assert (
        f"{type(pivot_view_0.missing).__module__}.{type(pivot_view_0.missing).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(pivot_view_0.missing) == 1


def test_case_8():
    str_0 = "}< YX+~5@(\nLNj7bJUv"
    var_0 = module_0.transpose(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reshape.TransposeView"
    )
    assert len(var_0) == 1
    with pytest.raises(AssertionError):
        module_0.UnflattenView()


def test_case_9():
    none_type_0 = None
    flatten_view_0 = module_0.FlattenView(none_type_0)
    assert (
        f"{type(flatten_view_0).__module__}.{type(flatten_view_0).__qualname__}"
        == "reshape.FlattenView"
    )
    assert flatten_view_0.table is None
    transpose_view_0 = module_0.TransposeView(none_type_0)
    assert (
        f"{type(transpose_view_0).__module__}.{type(transpose_view_0).__qualname__}"
        == "reshape.TransposeView"
    )
    assert transpose_view_0.source is None


def test_case_10():
    str_0 = "\x0bl#18To0?)R2"
    list_0 = [str_0, str_0]
    var_0 = module_0.unflatten(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reshape.UnflattenView"
    )
    assert var_0.input == "\x0bl#18To0?)R2"
    assert var_0.period == "\x0bl#18To0?)R2"
    assert var_0.missing is None
    bool_0 = True
    var_1 = module_0.melt(bool_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.MeltView"
    assert var_1.source is True
    assert var_1.key is None
    assert var_1.variables is None
    assert var_1.variablefield == "variable"
    assert var_1.valuefield == "value"
    var_2 = module_0.pivot(var_0, list_0, bool_0, var_1, var_1, str_0, bool_0, var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "reshape.PivotView"
    assert (
        f"{type(var_2.source).__module__}.{type(var_2.source).__qualname__}"
        == "reshape.UnflattenView"
    )
    assert var_2.f1 == ["\x0bl#18To0?)R2", "\x0bl#18To0?)R2"]
    assert var_2.f2 is True
    assert (
        f"{type(var_2.f3).__module__}.{type(var_2.f3).__qualname__}"
        == "reshape.MeltView"
    )
    assert (
        f"{type(var_2.aggfun).__module__}.{type(var_2.aggfun).__qualname__}"
        == "reshape.MeltView"
    )
    assert var_2.missing == "\x0bl#18To0?)R2"
    var_3 = module_0.flatten(bool_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "reshape.FlattenView"
    )
    assert var_3.table is True
    var_4 = var_3.__lt__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    var_0 = module_0.pivot(bool_0, bool_0, bool_0, bool_0, bool_0, tempdir=bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.PivotView"
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.f1 is False
    assert var_0.f2 is False
    assert var_0.f3 is False
    assert var_0.aggfun is False
    assert var_0.missing is None
    transpose_view_0 = module_0.TransposeView(bool_0)
    assert (
        f"{type(transpose_view_0).__module__}.{type(transpose_view_0).__qualname__}"
        == "reshape.TransposeView"
    )
    assert transpose_view_0.source is False
    var_1 = var_0.__iter__()
    var_2 = module_0.melt(bool_0, variablefield=bool_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "reshape.MeltView"
    assert var_2.source is False
    assert var_2.key is None
    assert var_2.variables is None
    assert var_2.variablefield is False
    assert var_2.valuefield == "value"
    var_3 = var_0.__iter__()
    var_3.format_map(var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    none_type_1 = None
    melt_view_0 = module_0.MeltView(
        none_type_1, variables=none_type_1, variablefield=none_type_1
    )
    assert (
        f"{type(melt_view_0).__module__}.{type(melt_view_0).__qualname__}"
        == "reshape.MeltView"
    )
    assert melt_view_0.source is None
    assert melt_view_0.key is None
    assert melt_view_0.variables is None
    assert melt_view_0.variablefield is None
    assert melt_view_0.valuefield == "value"
    str_0 = "=O'\x0bh("
    dict_0 = {str_0: none_type_1, str_0: str_0, str_0: none_type_0}
    melt_view_0.dict(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ";"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    bool_0 = True
    var_1 = module_0.transpose(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reshape.TransposeView"
    )
    assert len(var_1) == 3
    var_2 = module_0.iterrecast(str_0, var_0, var_1, var_0, var_0, var_0, bool_0)
    var_0.product(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "iM\\}|ipL-%Kp>)LaP"
    var_0 = module_0.FlattenView(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.FlattenView"
    )
    assert len(var_0) == 16
    var_1 = module_0.recast(var_0, variablefield=str_0, reducers=str_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "reshape.FlattenView"
    )
    assert len(var_1.source) == 16
    assert var_1.key is None
    assert var_1.variablefield == "iM\\}|ipL-%Kp>)LaP"
    assert var_1.valuefield == "value"
    assert var_1.samplesize == 1000
    assert var_1.reducers == "iM\\}|ipL-%Kp>)LaP"
    assert (
        f"{type(var_1.missing).__module__}.{type(var_1.missing).__qualname__}"
        == "reshape.FlattenView"
    )
    assert len(var_1.missing) == 16
    var_0.product(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 0
    flatten_view_0 = module_0.FlattenView(var_0)
    assert (
        f"{type(flatten_view_0).__module__}.{type(flatten_view_0).__qualname__}"
        == "reshape.FlattenView"
    )
    assert len(flatten_view_0) == 0
    var_1 = flatten_view_0.product(*var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.product"
    var_1.__iadd__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "X\nS"
    var_0 = module_0.flatten(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.FlattenView"
    )
    assert len(var_0) == 2
    melt_view_0 = var_0.__repr__()
    assert melt_view_0 == "+-----+\n| \n   |\n+=====+\n| 'S' |\n+-----+\n"
    melt_view_0.dropwhile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 0
    var_1 = var_0.product(*str_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.product"
    recast_view_0 = module_0.RecastView(var_1, missing=str_0)
    assert (
        f"{type(recast_view_0).__module__}.{type(recast_view_0).__qualname__}"
        == "reshape.RecastView"
    )
    assert len(recast_view_0) == 0
    var_2 = var_0.__iter__()
    var_0.__delitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "F"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, variablefield=str_0, reducers=str_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.source) == 1
    assert var_1.key is None
    assert var_1.variablefield == "F"
    assert var_1.valuefield == "value"
    assert var_1.samplesize == 1000
    assert var_1.reducers == "F"
    assert (
        f"{type(var_1.missing).__module__}.{type(var_1.missing).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.missing) == 1
    var_0.product(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = " "
    var_0 = module_0.iterrecast(str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    flatten_view_0 = module_0.FlattenView(str_0)
    assert (
        f"{type(flatten_view_0).__module__}.{type(flatten_view_0).__qualname__}"
        == "reshape.FlattenView"
    )
    assert len(flatten_view_0) == 0
    flatten_view_0.product(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 0
    var_1 = module_0.recast(var_0, variablefield=str_0, reducers=str_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert len(var_1) == 0
    var_2 = var_0.product(*var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.product"
    var_3 = var_0.__iter__()
    var_3.copy()


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "=["
    var_0 = module_0.recast(str_0, variablefield=str_0, reducers=str_0, missing=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.RecastView"
    )
    assert var_0.source == "=["
    assert var_0.key is None
    assert var_0.variablefield == "=["
    assert var_0.valuefield == "value"
    assert var_0.samplesize == 1000
    assert var_0.reducers == "=["
    assert var_0.missing == "=["
    var_0.product()


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, variables=str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.source) == 1
    assert var_1.key is None
    assert var_1.variablefield == "variable"
    assert var_1.valuefield == "value"
    assert var_1.samplesize == 1000
    assert var_1.reducers == {}
    assert (
        f"{type(var_1.missing).__module__}.{type(var_1.missing).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.missing) == 1
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = 693
    none_type_0 = None
    var_0 = module_0.iterpivot(int_0, int_0, int_0, int_0, int_0, none_type_0)
    var_1 = module_0.melt(var_0, var_0, variablefield=var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.MeltView"
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "builtins.generator"
    )
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.variables is None
    assert (
        f"{type(var_1.variablefield).__module__}.{type(var_1.variablefield).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.valuefield == "value"
    var_2 = module_0.recast(var_1, variablefield=var_1, reducers=var_1, missing=var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "reshape.RecastView"
    )
    assert len(var_2) == 0
    var_3 = var_1.product(*var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "itertools.product"
    recast_view_0 = module_0.RecastView(var_3, missing=var_2)
    var_4 = var_1.__iter__()
    var_4.copy()


def test_case_24():
    str_0 = " "
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.iterpivot(str_0, str_0, str_0, str_0, str_0, str_0)
    var_2 = var_0.product(*var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.product"


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "_sZ{Xn,s,"
    dict_0 = {str_0: bool_0}
    var_0 = module_0.unflatten(*list_0, **dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reshape.UnflattenView"
    )
    assert (
        f"{type(var_0.input).__module__}.{type(var_0.input).__qualname__}"
        == "petl.util.base.ValuesView"
    )
    assert var_0.period is True
    assert var_0.missing is None
    none_type_0 = None
    bool_1 = False
    var_1 = module_0.pivot(
        bool_0, bool_1, none_type_0, none_type_0, bool_0, none_type_0
    )
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.PivotView"
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_1.f1 is False
    assert var_1.f2 is None
    assert var_1.f3 is None
    assert var_1.aggfun is True
    assert var_1.missing is None
    var_1.split(maxsplit=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "K"
    var_0 = module_1.header(str_0)
    bool_0 = False
    var_1 = module_0.iterrecast(str_0, var_0, str_0, var_0, var_0, var_0, bool_0)
    flatten_view_0 = module_0.FlattenView(var_0)
    assert (
        f"{type(flatten_view_0).__module__}.{type(flatten_view_0).__qualname__}"
        == "reshape.FlattenView"
    )
    assert len(flatten_view_0) == 0
    var_2 = var_0.__contains__(str_0)
    var_3 = var_2.__repr__()
    flatten_view_0.product(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "F"
    str_1 = ""
    none_type_0 = None
    recast_view_0 = module_0.RecastView(
        str_0,
        variablefield=str_1,
        samplesize=str_1,
        reducers=str_1,
        missing=none_type_0,
    )
    assert (
        f"{type(recast_view_0).__module__}.{type(recast_view_0).__qualname__}"
        == "reshape.RecastView"
    )
    assert recast_view_0.source == "F"
    assert recast_view_0.key is None
    assert recast_view_0.variablefield == ""
    assert recast_view_0.valuefield == "value"
    assert recast_view_0.samplesize == ""
    assert recast_view_0.reducers == ""
    assert recast_view_0.missing is None
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, variablefield=str_1, samplesize=str_1)
    assert len(var_1.source) == 1
    assert var_1.valuefield == "value"
    assert var_1.reducers == {}
    var_1.product(*var_1)


def test_case_28():
    str_0 = "F"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = var_0.__add__(var_0)
    var_2 = module_0.melt(var_1, variables=str_0, variablefield=var_0)
    assert len(var_2) == 2
    var_3 = var_2.__repr__()
    assert var_3 == ""
    assert len(var_2) == 0
    var_4 = var_0.__iter__()


def test_case_29():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, variablefield=str_0, reducers=str_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert len(var_1) == 1
    var_2 = var_0.product(*var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.product"


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "F"
    list_0 = [str_0, str_0]
    var_0 = module_0.recast(str_0, variablefield=list_0, valuefield=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.RecastView"
    )
    assert var_0.source == "F"
    assert var_0.key is None
    assert var_0.variablefield == ["F", "F"]
    assert var_0.valuefield == "F"
    assert var_0.samplesize == 1000
    assert var_0.reducers == {}
    assert var_0.missing is None
    var_0.product()


def test_case_31():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = var_0.__iter__()
    none_type_0 = None
    var_2 = module_0.melt(var_1, str_1, variablefield=none_type_0)
    assert len(var_2) == 1
    var_3 = module_0.recast(var_0, missing=str_1)
    assert len(var_2) == 0
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_3.source).__module__}.{type(var_3.source).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_3.source) == 1
    assert var_3.key is None
    assert var_3.variablefield == "variable"
    assert var_3.valuefield == "value"
    assert var_3.samplesize == 1000
    assert var_3.reducers == {}
    assert var_3.missing == ""
    var_4 = var_2.__len__()
    assert var_4 == 0


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "F"
    str_1 = "Vt19)FVaA.M\x0b*:K"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    dict_0 = {var_0: var_0, var_0: str_0}
    var_1 = module_0.recast(dict_0, variablefield=dict_0, reducers=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "builtins.dict"
    )
    assert len(var_1.source) == 1
    assert var_1.key is None
    assert (
        f"{type(var_1.variablefield).__module__}.{type(var_1.variablefield).__qualname__}"
        == "builtins.dict"
    )
    assert len(var_1.variablefield) == 1
    assert var_1.valuefield == "value"
    assert var_1.samplesize == 1000
    assert (
        f"{type(var_1.reducers).__module__}.{type(var_1.reducers).__qualname__}"
        == "reshape.MeltView"
    )
    assert len(var_1.reducers) == 1
    assert var_1.missing is None
    var_1.__len__()


def test_case_33():
    str_0 = "F"
    str_1 = "Vt19)FVaA.M\x0b*q:K"
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = module_0.recast(var_0, variablefield=str_0, reducers=str_0, missing=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reshape.RecastView"
    )
    assert len(var_1) == 1
    var_2 = module_0.melt(var_0, variables=str_1)
    assert len(var_2) == 1
    var_3 = var_2.__len__()
    assert var_3 == 1


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "F"
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reshape.MeltView"
    assert len(var_0) == 1
    var_1 = var_0.reduce(str_1)
    var_2 = module_0.melt(str_0, variables=var_1)
    assert var_2.variables == ("F", "", "value")
    assert var_2.variablefield == "variable"
    assert var_2.valuefield == "value"
    var_3 = var_0.reduce(str_1)
    var_4 = module_0.recast(var_3, valuefield=str_1, samplesize=var_2, missing=var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "reshape.RecastView"
    )
    assert var_4.source == ("F", "", "value")
    assert var_4.key is None
    assert var_4.variablefield == "variable"
    assert var_4.valuefield == ""
    assert (
        f"{type(var_4.samplesize).__module__}.{type(var_4.samplesize).__qualname__}"
        == "reshape.MeltView"
    )
    assert var_4.reducers == {}
    assert (
        f"{type(var_4.missing).__module__}.{type(var_4.missing).__qualname__}"
        == "reshape.MeltView"
    )
    var_5 = var_4.__add__(var_1)
    var_6 = module_0.itermelt(str_1, var_5, str_1, var_5, var_2)
    var_7 = module_0.melt(var_2, variables=var_4)
    assert var_7.variablefield == "variable"
    assert var_7.valuefield == "value"
    melt_view_0 = module_0.MeltView(var_2, variables=str_1)
    assert melt_view_0.variablefield == "variable"
    assert melt_view_0.valuefield == "value"
    var_7.__repr__()


def test_case_35():
    str_0 = "["
    none_type_0 = None
    recast_view_0 = module_0.RecastView(str_0, samplesize=none_type_0)
    str_1 = ""
    var_0 = module_0.melt(str_0, str_0, variablefield=str_1)
    var_1 = var_0.cycle()
    var_2 = var_0.__getitem__(str_1)
    var_3 = module_0.melt(var_1, variables=str_1, variablefield=var_0)
    var_4 = var_3.__repr__()
