# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import hashjoins as module_0
import petl.util.base as module_1
import builtins as module_2


def test_case_0():
    str_0 = "znm%UOt"
    var_0 = module_0.hashjoin(str_0, str_0, cache=str_0, rprefix=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_0) == 7
    var_1 = var_0.len()
    assert var_1 == 7


def test_case_1():
    str_0 = "zUOt"
    var_0 = module_0.hashleftjoin(str_0, str_0, lprefix=str_0, rprefix=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_0) == 4
    with pytest.raises(ValueError):
        var_0.index(str_0)


def test_case_2():
    bool_0 = True
    var_0 = module_0.iterhashantijoin(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.hashjoin(none_type_0, none_type_0, rprefix=none_type_0)


def test_case_4():
    bool_0 = False
    var_0 = module_0.hashrightjoin(bool_0, bool_0, bool_0, missing=bool_0, cache=bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert var_0.left is False
    assert var_0.right is False
    assert var_0.lkey is False
    assert var_0.rkey is False
    assert var_0.missing is False
    assert var_0.cache is False
    assert var_0.llookup is None
    assert var_0.lprefix is None
    assert var_0.rprefix is None


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.rowgetter()
    module_0.hashantijoin(var_0, var_0, rkey=var_0)


def test_case_6():
    none_type_0 = None
    hash_anti_join_view_0 = module_0.HashAntiJoinView(
        none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(hash_anti_join_view_0).__module__}.{type(hash_anti_join_view_0).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert hash_anti_join_view_0.left is None
    assert hash_anti_join_view_0.right is None
    assert hash_anti_join_view_0.lkey is None
    assert hash_anti_join_view_0.rkey is None


def test_case_7():
    str_0 = "|jI-"
    none_type_0 = None
    var_0 = module_0.hashantijoin(str_0, str_0, rkey=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert len(var_0) == 1
    var_1 = var_0.reduce(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.hashlookupjoin(none_type_0, none_type_0, lprefix=none_type_0)


def test_case_9():
    none_type_0 = None
    hash_lookup_join_view_0 = module_0.HashLookupJoinView(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        rprefix=none_type_0,
    )
    assert (
        f"{type(hash_lookup_join_view_0).__module__}.{type(hash_lookup_join_view_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert hash_lookup_join_view_0.left is None
    assert hash_lookup_join_view_0.right is None
    assert hash_lookup_join_view_0.lkey is None
    assert hash_lookup_join_view_0.rkey is None
    assert hash_lookup_join_view_0.missing is None
    assert hash_lookup_join_view_0.lprefix is None
    assert hash_lookup_join_view_0.rprefix is None


def test_case_10():
    str_0 = "gnYLh6+'l1|"
    none_type_0 = None
    var_0 = module_0.hashlookupjoin(
        str_0, str_0, none_type_0, missing=str_0, lprefix=none_type_0, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 11
    var_1 = module_0.hashleftjoin(str_0, var_0, missing=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_1) == 11
    var_2 = var_0.permutations()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "itertools.permutations"
    )


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    hash_right_join_view_0 = module_0.HashRightJoinView(
        none_type_0, none_type_0, none_type_0, none_type_0, cache=none_type_0
    )
    assert (
        f"{type(hash_right_join_view_0).__module__}.{type(hash_right_join_view_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert hash_right_join_view_0.left is None
    assert hash_right_join_view_0.right is None
    assert hash_right_join_view_0.lkey is None
    assert hash_right_join_view_0.rkey is None
    assert hash_right_join_view_0.missing is None
    assert hash_right_join_view_0.cache is None
    assert hash_right_join_view_0.llookup is None
    assert hash_right_join_view_0.lprefix is None
    assert hash_right_join_view_0.rprefix is None
    hash_right_join_view_0.ifilter(hash_right_join_view_0)


def test_case_12():
    str_0 = "znm%UOt"
    var_0 = module_0.hashrightjoin(
        str_0, str_0, cache=str_0, lprefix=str_0, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_0) == 7
    var_1 = var_0.len()
    assert var_1 == 7


def test_case_13():
    str_0 = "gnYLh6+'l1|"
    list_0 = [str_0, str_0]
    var_0 = module_0.hashrightjoin(list_0, list_0, rprefix=list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_0) == 2
    var_1 = var_0.permutations()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "itertools.permutations"
    )


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    str_0 = "gnYLh6+'l1|"
    list_0 = [str_0, str_0]
    none_type_1 = None
    var_0 = module_0.hashlookupjoin(
        list_0, list_0, none_type_1, missing=list_0, lprefix=none_type_1, rprefix=list_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 2
    var_1 = module_0.hashjoin(
        var_0, none_type_0, list_0, cache=none_type_0, lprefix=none_type_1
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_1.left) == 2
    assert var_1.right is None
    assert var_1.lkey == ["gnYLh6+'l1|", "gnYLh6+'l1|"]
    assert var_1.rkey == ["gnYLh6+'l1|", "gnYLh6+'l1|"]
    assert var_1.cache is None
    assert var_1.rlookup is None
    assert var_1.lprefix is None
    assert var_1.rprefix is None
    var_2 = var_0.starmap(list_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "itertools.starmap"
    var_3 = var_0.tuple()
    var_4 = var_0.__iter__()
    var_1.permutations()


def test_case_15():
    str_0 = "zUOt"
    var_0 = module_0.hashrightjoin(str_0, str_0, missing=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_0) == 4
    var_1 = module_0.hashleftjoin(var_0, var_0, lprefix=var_0, rprefix=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_1) == 4
    with pytest.raises(ValueError):
        var_1.index(str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    str_0 = "nYLh6#'l|"
    list_0 = [str_0, str_0]
    none_type_1 = None
    var_0 = module_0.hashlookupjoin(
        list_0, str_0, lkey=none_type_0, missing=none_type_1
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 2
    var_1 = var_0.tuple()
    hash_lookup_join_view_0 = module_0.HashLookupJoinView(
        none_type_0, none_type_1, var_1, var_1, lprefix=list_0, rprefix=list_0
    )
    assert hash_lookup_join_view_0.lkey == (
        ("n", "Y", "L", "h", "6", "#", "'", "l", "|"),
        ("n", "Y", "L", "h", "6", "#", "'", "l", "|"),
    )
    assert hash_lookup_join_view_0.rkey == (
        ("n", "Y", "L", "h", "6", "#", "'", "l", "|"),
        ("n", "Y", "L", "h", "6", "#", "'", "l", "|"),
    )
    var_2 = var_0.dropwhile(list_0)
    var_2.starmap(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    hash_left_join_view_0 = module_0.HashLeftJoinView(
        none_type_0, none_type_0, none_type_0, none_type_0, cache=none_type_0
    )
    assert (
        f"{type(hash_left_join_view_0).__module__}.{type(hash_left_join_view_0).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert hash_left_join_view_0.left is None
    assert hash_left_join_view_0.right is None
    assert hash_left_join_view_0.lkey is None
    assert hash_left_join_view_0.rkey is None
    assert hash_left_join_view_0.missing is None
    assert hash_left_join_view_0.cache is None
    assert hash_left_join_view_0.rlookup is None
    assert hash_left_join_view_0.lprefix is None
    assert hash_left_join_view_0.rprefix is None
    hash_left_join_view_0.filter(hash_left_join_view_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    str_0 = "gnYLh6+'l1|"
    list_0 = [str_0, str_0]
    var_0 = module_0.hashlookupjoin(
        list_0, list_0, none_type_0, missing=list_0, lprefix=none_type_0, rprefix=list_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 2
    var_1 = var_0.tuple()
    hash_lookup_join_view_0 = module_0.HashLookupJoinView(
        none_type_0, none_type_0, str_0, var_1
    )
    assert hash_lookup_join_view_0.rkey == (
        ("g", "n", "Y", "L", "h", "6", "+", "'", "l", "1", "|"),
        ("g", "n", "Y", "L", "h", "6", "+", "'", "l", "1", "|"),
    )
    var_2 = module_0.hashrightjoin(var_1, str_0, cache=var_0, rprefix=var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_2) == 11
    var_3 = var_2.permutations()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "itertools.permutations"
    )
    hash_lookup_join_view_0.tuple()


def test_case_19():
    str_0 = "gnYLh6+'l1|"
    none_type_0 = None
    var_0 = module_0.hashlookupjoin(
        str_0, str_0, none_type_0, missing=str_0, lprefix=none_type_0, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 11
    var_1 = module_0.hashleftjoin(str_0, var_0, missing=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_1) == 11
    var_2 = module_0.hashantijoin(str_0, var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert len(var_2) == 1
    object_0 = module_2.object()


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "znm%UOt"
    var_0 = module_0.hashjoin(str_0, str_0, cache=str_0, rprefix=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_0) == 7
    var_0.combinations(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "\rIbN\txJ"
    dict_0 = {}
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    var_0 = module_0.hashlookupjoin(
        str_0, set_0, lkey=none_type_0, lprefix=str_0, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 7
    var_1 = var_0.min()
    var_1.reduce(str_0, **dict_0)


def test_case_22():
    str_0 = "gnYLh6+'l1|"
    none_type_0 = None
    var_0 = module_0.hashlookupjoin(
        str_0, str_0, none_type_0, missing=str_0, lprefix=none_type_0, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLookupJoinView"
    )
    assert len(var_0) == 11
    var_1 = module_0.hashleftjoin(str_0, var_0, missing=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_1) == 11
    var_2 = module_0.hashantijoin(str_0, var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert len(var_2) == 1
    with pytest.raises(ValueError):
        var_1.index(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "zn|%UOt"
    none_type_0 = None
    var_0 = module_0.hashjoin(str_0, str_0, cache=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_0) == 7
    var_1 = var_0.all()
    assert var_1 is True
    var_1.all()


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "zn|%UOt"
    var_0 = module_0.hashrightjoin(str_0, str_0, missing=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_0) == 7
    var_1 = module_0.hashjoin(str_0, var_0, lprefix=str_0, rprefix=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_1) == 7
    var_2 = var_1.all()
    assert var_2 is True
    var_3 = var_1.chain()
    var_4 = var_0.len()
    assert var_4 == 7
    var_5 = module_0.hashleftjoin(var_1, var_1, missing=var_1, lprefix=var_4)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_5) == 7
    var_3.len()


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "zn|%UOt"
    str_1 = "znm%UOt"
    var_0 = module_0.hashleftjoin(str_0, str_1, cache=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_0) == 7
    var_1 = module_0.hashjoin(str_0, str_0, cache=str_0, rprefix=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_1) == 7
    var_2 = var_1.len()
    assert var_2 == 7
    var_3 = module_0.hashleftjoin(var_0, var_0, lprefix=var_0, rprefix=var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_3) == 7
    var_4 = var_3.len()
    assert var_4 == 7
    var_5 = var_3.len()
    assert var_5 == 7
    var_0.combinations()


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "zn|%UOt"
    str_1 = "znm%UOt"
    var_0 = module_0.hashantijoin(str_1, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert len(var_0) == 2
    var_1 = module_0.hashjoin(str_0, str_0, cache=str_0, rprefix=str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_1) == 7
    var_2 = var_1.len()
    assert var_2 == 7
    var_3 = module_0.hashleftjoin(var_0, var_0, lprefix=var_0, rprefix=var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_3) == 2
    var_4 = var_3.len()
    assert var_4 == 2
    bool_0 = True
    var_4.filter(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "zn|%UOt"
    str_1 = "znm%UOt"
    var_0 = module_0.hashrightjoin(
        str_1, str_1, missing=str_0, cache=str_1, lprefix=str_1, rprefix=str_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "hashjoins.HashRightJoinView"
    )
    assert len(var_0) == 7
    none_type_0 = None
    var_1 = module_0.hashjoin(str_0, str_1, cache=str_0, rprefix=none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "hashjoins.HashJoinView"
    )
    assert len(var_1) == 6
    var_2 = module_0.hashantijoin(var_1, str_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "hashjoins.HashAntiJoinView"
    )
    assert len(var_2) == 1
    var_3 = var_0.all()
    assert var_3 is True
    var_4 = var_1.len()
    assert var_4 == 6
    dict_0 = {var_0: var_0, var_4: var_0, var_1: var_1, var_4: str_0}
    var_5 = module_0.hashleftjoin(var_0, var_0, lprefix=var_0, rprefix=var_4)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "hashjoins.HashLeftJoinView"
    )
    assert len(var_5) == 7
    var_6 = var_5.len()
    assert var_6 == 7
    dict_0.combinations()
