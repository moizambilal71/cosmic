# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import counting as module_0


def test_case_0():
    bytes_0 = b"\x1e,\x80?\xa9W\x1bl\x8eI\xf3If\xe6\xeb\x90\rx\xb5"
    type_counts_view_0 = module_0.nrows(bytes_0)
    assert type_counts_view_0 == 18


def test_case_1():
    set_0 = set()
    var_0 = module_0.nrows(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    str_0 = "'"
    var_0 = module_0.valuecounts(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert var_0.table is None
    assert var_0.field == ()
    assert var_0.missing is None
    list_0 = [str_0]
    var_1 = module_0.valuecounter(str_0, *list_0)
    module_0.stringpatterncounter(var_0, none_type_0)


def test_case_3():
    str_0 = "4"
    value_counts_view_0 = module_0.ValueCountsView(str_0, str_0)
    assert (
        f"{type(value_counts_view_0).__module__}.{type(value_counts_view_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert len(value_counts_view_0) == 1
    var_0 = module_0.typecounter(value_counts_view_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "collections.Counter"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.parsecounter(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.parsecounter(none_type_0, none_type_0, none_type_0)


def test_case_6():
    none_type_0 = None
    var_0 = module_0.parsecounts(none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "counting.ParseCountsView"
    )
    assert var_0.table is None
    assert var_0.field is None
    assert (
        f"{type(var_0.parsers).__module__}.{type(var_0.parsers).__qualname__}"
        == "builtins.dict"
    )
    assert len(var_0.parsers) == 2


def test_case_7():
    set_0 = set()
    var_0 = module_0.ParseCountsView(set_0, set_0, set_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "counting.ParseCountsView"
    )
    assert var_0.table == {*()}
    assert var_0.field == {*()}
    assert var_0.parsers == {*()}


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.nrows(none_type_0)


def test_case_9():
    bool_0 = False
    var_0 = module_0.valuecounts(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert var_0.table is False
    assert var_0.field == ()
    assert var_0.missing is None


def test_case_10():
    set_0 = set()
    parse_counts_view_0 = module_0.typecounts(set_0, set_0)
    assert (
        f"{type(parse_counts_view_0).__module__}.{type(parse_counts_view_0).__qualname__}"
        == "counting.TypeCountsView"
    )
    assert parse_counts_view_0.table == {*()}
    assert parse_counts_view_0.field == {*()}


def test_case_11():
    bytes_0 = b"\x1e,\x80?\xa9W\x1bl\x8eIo\xf3If\xe6\xeb\x90\rx\xb5"
    type_counts_view_0 = module_0.TypeCountsView(bytes_0, bytes_0)
    assert (
        f"{type(type_counts_view_0).__module__}.{type(type_counts_view_0).__qualname__}"
        == "counting.TypeCountsView"
    )
    assert (
        type_counts_view_0.table
        == b"\x1e,\x80?\xa9W\x1bl\x8eIo\xf3If\xe6\xeb\x90\rx\xb5"
    )
    assert (
        type_counts_view_0.field
        == b"\x1e,\x80?\xa9W\x1bl\x8eIo\xf3If\xe6\xeb\x90\rx\xb5"
    )


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.stringpatterns(none_type_0, none_type_0)


def test_case_13():
    str_0 = "float"
    var_0 = module_0.rowlengths(str_0)
    assert len(var_0) == 2


def test_case_14():
    set_0 = set()
    var_0 = module_0.rowlengths(set_0)


def test_case_15():
    str_0 = "4"
    value_counts_view_0 = module_0.ValueCountsView(str_0, str_0)
    assert (
        f"{type(value_counts_view_0).__module__}.{type(value_counts_view_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert len(value_counts_view_0) == 1
    var_0 = module_0.typecounter(value_counts_view_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "collections.Counter"
    )
    assert len(var_0) == 0
    var_1 = module_0.stringpatterns(str_0, str_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "petl.util.base.TableWrapper"
    )
    assert len(var_1) == 1


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "??W?;~^:nQi}rrU@\t\r\t-"
    bool_0 = False
    bool_1 = False
    var_0 = module_0.valuecount(str_0, bool_0, bool_1)
    module_0.stringpatterncounter(var_0, var_0)


def test_case_17():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.parsecounter(str_0, bool_0)
    var_1 = module_0.typecounter(str_0, bool_0)
    assert len(var_1) == 1
    bool_1 = True
    var_2 = module_0.stringpatterns(var_0, bool_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "petl.util.base.TableWrapper"
    )
    assert len(var_2) == 2


def test_case_18():
    str_0 = "="
    var_0 = module_0.parsecounter(str_0, str_0)


def test_case_19():
    str_0 = "M"
    list_0 = [str_0]
    var_0 = module_0.valuecounter(str_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.parsecounts(str_0, bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "counting.ParseCountsView"
    )
    assert len(var_0) == 3
    var_1 = module_0.parsecounter(str_0, bool_0)
    var_2 = module_0.typecounter(str_0, bool_0)
    assert len(var_2) == 1
    module_0.valuecounter(var_0, *var_0)


def test_case_21():
    str_0 = "="
    var_0 = module_0.typecounter(str_0, str_0)


def test_case_22():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.parsecounter(str_0, bool_0)
    var_1 = module_0.typecounter(str_0, bool_0)
    assert len(var_1) == 1


def test_case_23():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.parsecounter(str_0, bool_0)
    var_1 = module_0.typecounter(str_0, bool_0)
    assert len(var_1) == 1
    var_2 = module_0.parsecounter(var_0, bool_0, var_0)


def test_case_24():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.typecounter(str_0, bool_0)
    assert len(var_0) == 1


def test_case_25():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    var_0 = module_0.parsecounter(str_0, bool_0)
    var_1 = module_0.valuecount(var_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    str_0 = "JX? C}l]6Z'TPW"
    type_counts_view_0 = module_0.TypeCountsView(str_0, bool_0)
    assert (
        f"{type(type_counts_view_0).__module__}.{type(type_counts_view_0).__qualname__}"
        == "counting.TypeCountsView"
    )
    assert len(type_counts_view_0) == 2
    var_0 = type_counts_view_0.list()
    module_0.parsecounter(str_0, var_0)


def test_case_27():
    str_0 = "3#"
    list_0 = [str_0, str_0, str_0, str_0]
    value_counts_view_0 = module_0.ValueCountsView(list_0, str_0)
    assert (
        f"{type(value_counts_view_0).__module__}.{type(value_counts_view_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert len(value_counts_view_0) == 2
    var_0 = value_counts_view_0.__contains__(list_0)
    assert var_0 is False


def test_case_28():
    str_0 = "#"
    list_0 = [str_0, str_0, str_0, str_0]
    value_counts_view_0 = module_0.ValueCountsView(list_0, str_0)
    assert (
        f"{type(value_counts_view_0).__module__}.{type(value_counts_view_0).__qualname__}"
        == "counting.ValueCountsView"
    )
    assert len(value_counts_view_0) == 2
    var_0 = value_counts_view_0.__contains__(list_0)
    assert var_0 is False
