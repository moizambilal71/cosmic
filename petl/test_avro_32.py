# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import avro as module_0
import petl.util.base as module_1
import petl.transform.headers as module_2
import decimal as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.appendavro(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.appendavro(bool_0, bool_0, sample=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "m2b]"
    module_0.toavro(str_0, str_0, codec=str_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.fromavro(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avro.AvroView"
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.io.sources.StdinSource"
    )
    assert var_0.limit is None
    assert var_0.skip == 0
    assert var_0.avro_args == {}
    assert var_0.avro_schema is None


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.toavro(bool_0, bool_0, bool_0)


def test_case_5():
    complex_0 = 786.8356 + 1262.71j
    avro_view_0 = module_0.AvroView(complex_0, complex_0, complex_0)
    assert (
        f"{type(avro_view_0).__module__}.{type(avro_view_0).__qualname__}"
        == "avro.AvroView"
    )
    assert avro_view_0.source == (786.8356 + 1262.71j)
    assert avro_view_0.limit == (786.8356 + 1262.71j)
    assert avro_view_0.skip == (786.8356 + 1262.71j)
    assert avro_view_0.avro_args == {}
    assert avro_view_0.avro_schema is None


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "qdkk'M"
    none_type_0 = None
    var_0 = module_0.fromavro(none_type_0, str_0, str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avro.AvroView"
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.io.sources.StdinSource"
    )
    assert var_0.limit == "qdkk'M"
    assert var_0.skip == "qdkk'M"
    assert var_0.avro_args == {}
    assert var_0.avro_schema is None
    var_1 = var_0.get_avro_schema()
    var_2 = module_0.appendavro(none_type_0, str_0, none_type_0)
    module_0.appendavro(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    var_0 = module_0.fromavro(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avro.AvroView"
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.io.sources.StdinSource"
    )
    assert var_0.limit is None
    assert var_0.skip == 0
    assert var_0.avro_args == {}
    assert var_0.avro_schema is None
    module_0.fromavro(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "gOYdkk'M"
    var_0 = module_1.iterpeek(str_0)
    module_0.toavro(var_0, str_0, compression_level=var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "m2b]"
    module_0.toavro(str_0, str_0, str_0, compression_level=str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    str_0 = "8#[MY:?6|r0%r"
    str_1 = "e0b\rp"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    var_0 = module_0.toavro(
        none_type_0, none_type_0, none_type_0, none_type_0, **dict_0
    )
    module_0.appendavro(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x14Wm-\xbb\xcc\xbeH$J"
    bytes_1 = b"k\x91\xf3Eu\x9d"
    list_0 = [bytes_1, bytes_1, bytes_0]
    tuple_0 = (bytes_0, bytes_1, list_0)
    bool_0 = True
    module_0.appendavro(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    str_0 = "0b\r^p"
    var_0 = module_2.setheader(str_0, str_0)
    var_1 = module_0.appendavro(none_type_0, none_type_0, var_0)
    module_0.toavro(var_0, none_type_0, compression_level=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    decimal_0 = module_3.Decimal()
    module_0.precision_and_scale(decimal_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_0.appendavro(none_type_0, none_type_0)
    str_0 = "e0b\rp"
    var_1 = module_2.setheader(none_type_0, none_type_0)
    var_2 = module_1.dicts(str_0)
    var_3 = var_2.permutations()
    module_0.appendavro(var_3, var_0)
