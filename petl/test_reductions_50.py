# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import reductions as module_0
import petl.util.base as module_1
import builtins as module_2
import petl.errors as module_3
import petl.transform.dedup as module_4
import petl.util.counting as module_5


def test_case_0():
    str_0 = "{sHR@vjI"
    tuple_0 = module_0.groupselectmin(str_0, str_0, str_0, str_0, str_0)
    assert (
        f"{type(tuple_0).__module__}.{type(tuple_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(tuple_0.source).__module__}.{type(tuple_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert tuple_0.key == "{sHR@vjI"
    assert tuple_0.header is None


def test_case_1():
    none_type_0 = None
    var_0 = module_0.rowreduce(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key is None
    assert var_0.header is None
    assert var_0.reducer is None


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    var_0 = module_0.groupselectlast(bytes_0, bytes_0, tempdir=bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    assert var_0.header is None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, var_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        multi_aggregate_view_0.source
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        f"{type(multi_aggregate_view_0.key).__module__}.{type(multi_aggregate_view_0.key).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_1 = multi_aggregate_view_0.__setitem__(var_0, bytes_0)
    multi_aggregate_view_0.__len__()


def test_case_3():
    none_type_0 = None
    var_0 = module_0.groupcountdistinctvalues(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.dedup.DistinctView"
    )
    assert var_0.key is None
    assert var_0.value is None
    assert var_0.field == "value"


def test_case_4():
    none_type_0 = None
    var_0 = module_0.aggregate(none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert var_0.source is None
    assert var_0.key is None
    assert (
        f"{type(var_0.aggregation).__module__}.{type(var_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_0.aggregation) == 0


def test_case_5():
    none_type_0 = None
    simple_aggregate_view_0 = module_0.SimpleAggregateView(
        none_type_0, none_type_0, presorted=none_type_0
    )
    assert (
        f"{type(simple_aggregate_view_0).__module__}.{type(simple_aggregate_view_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert simple_aggregate_view_0.table is None
    assert simple_aggregate_view_0.key is None
    assert simple_aggregate_view_0.value is None
    assert simple_aggregate_view_0.field == "value"


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    simple_aggregate_view_0 = module_0.SimpleAggregateView(
        bytes_0, bytes_0, bytes_0, buffersize=bytes_0
    )
    assert (
        f"{type(simple_aggregate_view_0).__module__}.{type(simple_aggregate_view_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(simple_aggregate_view_0.table).__module__}.{type(simple_aggregate_view_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        simple_aggregate_view_0.key
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        simple_aggregate_view_0.aggregation
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert simple_aggregate_view_0.value is None
    assert simple_aggregate_view_0.field == "value"
    simple_aggregate_view_0.apply(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "18PI83Qgl'\"VS+Fe>"
    set_0 = {str_0}
    none_type_0 = None
    var_0 = module_0.groupcountdistinctvalues(set_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.dedup.DistinctView"
    )
    assert var_0.key is None
    assert var_0.value is None
    assert var_0.field == "value"
    var_0.reduce(set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    simple_aggregate_view_0 = module_0.SimpleAggregateView(
        bytes_0, bytes_0, bytes_0, buffersize=bytes_0
    )
    assert (
        f"{type(simple_aggregate_view_0).__module__}.{type(simple_aggregate_view_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(simple_aggregate_view_0.table).__module__}.{type(simple_aggregate_view_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        simple_aggregate_view_0.key
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        simple_aggregate_view_0.aggregation
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert simple_aggregate_view_0.value is None
    assert simple_aggregate_view_0.field == "value"
    simple_aggregate_view_0.tuple()


def test_case_9():
    none_type_0 = None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        none_type_0, none_type_0, presorted=none_type_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source is None
    assert multi_aggregate_view_0.key is None
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0


def test_case_10():
    bytes_0 = b"\rJ\xbe\x9c\xa4##D"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\rJ\xbe\x9c\xa4##D"
    assert multi_aggregate_view_0.key == b"\rJ\xbe\x9c\xa4##D"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0


def test_case_11():
    none_type_0 = None
    merge_duplicates_view_0 = module_0.MergeDuplicatesView(none_type_0, none_type_0)
    assert (
        f"{type(merge_duplicates_view_0).__module__}.{type(merge_duplicates_view_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(merge_duplicates_view_0.table).__module__}.{type(merge_duplicates_view_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert merge_duplicates_view_0.key is None
    assert merge_duplicates_view_0.missing is None


def test_case_12():
    str_0 = "Wtl"
    var_0 = module_0.itersimpleaggregate(str_0, str_0, str_0, str_0, str_0)
    var_1 = module_0.mergeduplicates(var_0, var_0, presorted=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "builtins.generator"
    )
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.missing is None
    var_1.__str__()


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\rJ\xbe\x9c\xa4##D"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\rJ\xbe\x9c\xa4##D"
    assert multi_aggregate_view_0.key == b"\rJ\xbe\x9c\xa4##D"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    none_type_0 = None
    var_0 = module_0.mergeduplicates(
        multi_aggregate_view_0, bytes_0, tempdir=bytes_0, cache=none_type_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\rJ\xbe\x9c\xa4##D"
    assert var_0.missing is None
    var_0.__str__()


def test_case_14():
    with pytest.raises(AssertionError):
        module_0.merge()


def test_case_15():
    none_type_0 = None
    var_0 = module_0.fold(none_type_0, none_type_0, none_type_0, tempdir=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "reductions.FoldView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key is None
    assert var_0.f is None
    assert var_0.value is None


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\rJ\xbe\x1e\x9c\x1f\xa4##D"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\rJ\xbe\x1e\x9c\x1f\xa4##D"
    assert multi_aggregate_view_0.key == b"\rJ\xbe\x1e\x9c\x1f\xa4##D"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    multi_aggregate_view_0.__len__()


def test_case_17():
    iter_container_0 = module_1.IterContainer()
    var_0 = module_0.groupselectmin(
        iter_container_0, iter_container_0, iter_container_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        f"{type(var_0.key).__module__}.{type(var_0.key).__qualname__}"
        == "petl.util.base.IterContainer"
    )
    assert var_0.header is None


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    var_0 = module_0.groupselectmax(bytes_0, bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    assert var_0.header is None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, var_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        multi_aggregate_view_0.source
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        f"{type(multi_aggregate_view_0.key).__module__}.{type(multi_aggregate_view_0.key).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_1 = multi_aggregate_view_0.__setitem__(var_0, bytes_0)
    multi_aggregate_view_0.__len__()


def test_case_19():
    none_type_0 = None
    var_0 = module_0.mergeduplicates(none_type_0, none_type_0, presorted=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key is None
    assert var_0.missing is None


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\xeflo\x80\xb2 \xf2\xfa\x0e\x9f"
    var_0 = module_0.itermultiaggregate(bytes_0, bytes_0, bytes_0)
    var_1 = module_0.fold(var_0, bytes_0, var_0, tempdir=bytes_0, cache=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reductions.FoldView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_1.key == b"\xeflo\x80\xb2 \xf2\xfa\x0e\x9f"
    assert (
        f"{type(var_1.f).__module__}.{type(var_1.f).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.value is None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, var_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\xeflo\x80\xb2 \xf2\xfa\x0e\x9f"
    assert (
        f"{type(multi_aggregate_view_0.key).__module__}.{type(multi_aggregate_view_0.key).__qualname__}"
        == "builtins.generator"
    )
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_2 = var_1.__iter__()
    multi_aggregate_view_0.__len__()


def test_case_21():
    base_exception_0 = module_2.BaseException()
    with pytest.raises(module_3.ArgumentError):
        module_0.aggregate(base_exception_0, base_exception_0, base_exception_0)


def test_case_22():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    simple_aggregate_view_0 = module_0.SimpleAggregateView(
        bytes_0, bytes_0, bytes_0, buffersize=bytes_0
    )
    assert (
        f"{type(simple_aggregate_view_0).__module__}.{type(simple_aggregate_view_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(simple_aggregate_view_0.table).__module__}.{type(simple_aggregate_view_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        simple_aggregate_view_0.key
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        simple_aggregate_view_0.aggregation
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert simple_aggregate_view_0.value is None
    assert simple_aggregate_view_0.field == "value"


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\xe6"
    var_0 = module_0.groupcountdistinctvalues(bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\xe6"
    assert var_0.value is None
    assert var_0.field == "value"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\xe6"
    assert multi_aggregate_view_0.key == b"\xe6"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_0.__len__()


def test_case_24():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6 \x00\xd1\xc4g\t\xf6\xb3"
    with pytest.raises(module_3.ArgumentError):
        module_0.MultiAggregateView(bytes_0, bytes_0, bytes_0, tempdir=bytes_0)


def test_case_25():
    int_0 = -3139
    fold_view_0 = module_0.FoldView(int_0, int_0, int_0, presorted=int_0, tempdir=int_0)
    assert (
        f"{type(fold_view_0).__module__}.{type(fold_view_0).__qualname__}"
        == "reductions.FoldView"
    )
    assert fold_view_0.table == -3139
    assert fold_view_0.key == -3139
    assert fold_view_0.f == -3139
    assert fold_view_0.value is None


def test_case_26():
    str_0 = "Wtl"
    none_type_0 = None
    var_0 = module_0.itersimpleaggregate(
        str_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    var_1 = module_0.mergeduplicates(var_0, var_0, presorted=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "builtins.generator"
    )
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "builtins.generator"
    )
    assert var_1.missing is None
    var_1.__str__()


def test_case_27():
    dict_0 = {}
    var_0 = module_0.aggregate(
        dict_0, dict_0, dict_0, presorted=dict_0, buffersize=dict_0, cache=dict_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == {}
    assert var_0.aggregation == {}
    var_1 = module_0.fold(var_0, var_0, var_0, tempdir=var_0, cache=dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reductions.FoldView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        f"{type(var_1.f).__module__}.{type(var_1.f).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert var_1.value is None
    var_2 = module_0.mergeduplicates(var_1, var_1, buffersize=var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_2.table).__module__}.{type(var_2.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        f"{type(var_2.key).__module__}.{type(var_2.key).__qualname__}"
        == "reductions.FoldView"
    )
    assert var_2.missing is None
    list_0 = [var_0]
    with pytest.raises(AssertionError):
        module_0.merge(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = -134
    var_0 = module_0.RowReduceView(int_0, int_0, int_0, int_0, int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert var_0.source == -134
    assert var_0.key == -134
    assert var_0.header == -134
    assert var_0.reducer == -134
    var_1 = module_0.aggregate(
        int_0, int_0, buffersize=int_0, tempdir=int_0, cache=int_0
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        f"{type(var_1.source).__module__}.{type(var_1.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_1.key == -134
    assert (
        f"{type(var_1.aggregation).__module__}.{type(var_1.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_1.aggregation) == 0
    var_0.index(int_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b"\xach\x01I^\xd5&\xf6Y~MZ\xa6\x9d\xd1\xc4g\t\xf6\xb3"
    none_type_0 = None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, none_type_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        multi_aggregate_view_0.source
        == b"\xach\x01I^\xd5&\xf6Y~MZ\xa6\x9d\xd1\xc4g\t\xf6\xb3"
    )
    assert multi_aggregate_view_0.key is None
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    multi_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"\xdb"
    var_0 = module_0.groupcountdistinctvalues(bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\xdb"
    assert var_0.value is None
    assert var_0.field == "value"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\xdb"
    assert multi_aggregate_view_0.key == b"\xdb"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_1 = multi_aggregate_view_0.__setitem__(var_0, bytes_0)
    simple_aggregate_view_0 = module_0.SimpleAggregateView(
        multi_aggregate_view_0, var_1, presorted=bytes_0
    )
    assert (
        f"{type(simple_aggregate_view_0.table).__module__}.{type(simple_aggregate_view_0.table).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert simple_aggregate_view_0.field == "value"
    simple_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_31():
    bytes_0 = b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        multi_aggregate_view_0.source
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        multi_aggregate_view_0.key
        == b"\xe2h\x01I^\xd5&\xf6YMZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    )
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_0 = multi_aggregate_view_0.__setitem__(multi_aggregate_view_0, bytes_0)
    multi_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_32():
    bytes_0 = b"\x12l5?\xfd\xcd\t6P\x1a\n\xdb\xdc9\xc4"
    var_0 = module_1.iterpeek(bytes_0)
    var_1 = module_0.fold(var_0, bytes_0, var_0, tempdir=bytes_0, cache=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "reductions.FoldView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_1.key == b"\x12l5?\xfd\xcd\t6P\x1a\n\xdb\xdc9\xc4"
    assert (
        f"{type(var_1.f).__module__}.{type(var_1.f).__qualname__}" == "builtins.tuple"
    )
    assert len(var_1.f) == 2
    assert var_1.value is None
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, var_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\x12l5?\xfd\xcd\t6P\x1a\n\xdb\xdc9\xc4"
    assert (
        f"{type(multi_aggregate_view_0.key).__module__}.{type(multi_aggregate_view_0.key).__qualname__}"
        == "builtins.tuple"
    )
    assert len(multi_aggregate_view_0.key) == 2
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_2 = var_1.__iter__()
    multi_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b"{(6\x05\xab\xa3\xb2"
    bytes_1 = b"\xe2h\x01\x96^y&\xf6YM\x8bZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    var_0 = module_4.distinct(bytes_1, count=bytes_0, buffersize=bytes_1, cache=bytes_0)
    fold_view_0 = module_0.FoldView(
        bytes_0,
        bytes_0,
        var_0,
        presorted=bytes_0,
        buffersize=var_0,
        tempdir=var_0,
        cache=bytes_0,
    )
    assert (
        f"{type(fold_view_0).__module__}.{type(fold_view_0).__qualname__}"
        == "reductions.FoldView"
    )
    assert fold_view_0.table == b"{(6\x05\xab\xa3\xb2"
    assert fold_view_0.key == b"{(6\x05\xab\xa3\xb2"
    assert (
        f"{type(fold_view_0.f).__module__}.{type(fold_view_0.f).__qualname__}"
        == "petl.transform.dedup.DistinctView"
    )
    assert fold_view_0.value is None
    none_type_0 = None
    set_0 = {fold_view_0, bytes_1}
    var_1 = module_0.itermultiaggregate(bytes_1, var_0, set_0)
    var_2 = module_0.groupselectlast(bytes_1, bytes_1, tempdir=none_type_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_2.source).__module__}.{type(var_2.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_2.key == b"\xe2h\x01\x96^y&\xf6YM\x8bZ\xa6\x00\xd1\xc4g\t\xf6\xb3"
    assert var_2.header is None
    none_type_1 = None
    var_3 = var_0.__iter__()
    var_4 = var_3.__iter__()
    tuple_0 = (none_type_1,)
    module_0.MultiAggregateView(var_4, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b"\xdb"
    var_0 = module_1.iterpeek(bytes_0)
    var_1 = module_0.groupcountdistinctvalues(bytes_0, var_0, bytes_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        f"{type(var_1.key).__module__}.{type(var_1.key).__qualname__}"
        == "builtins.tuple"
    )
    assert len(var_1.key) == 2
    assert var_1.value is None
    assert var_1.field == "value"
    var_1.__len__()


def test_case_35():
    bytes_0 = b"{(6\x05\xab\xa3\xb2"
    bytes_1 = b""
    merge_duplicates_view_0 = module_0.MergeDuplicatesView(
        bytes_1, bytes_1, bytes_0, bytes_1, cache=bytes_0
    )
    assert (
        f"{type(merge_duplicates_view_0).__module__}.{type(merge_duplicates_view_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(merge_duplicates_view_0.table).__module__}.{type(merge_duplicates_view_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert merge_duplicates_view_0.key == b""
    assert merge_duplicates_view_0.missing == b"{(6\x05\xab\xa3\xb2"
    var_0 = bytes_1.__str__()
    bool_0 = False
    var_1 = module_0.groupselectlast(var_0, bool_0, bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert len(var_1) == 2
    var_2 = merge_duplicates_view_0.map(bool_0)
    set_0 = {merge_duplicates_view_0, var_2}
    var_3 = module_0.groupcountdistinctvalues(var_2, bytes_1, set_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_3.table).__module__}.{type(var_3.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_3.key == b""
    assert var_3.value is None
    assert var_3.field == "value"
    var_4 = var_2.__iter__()
    var_5 = var_4.__iter__()
    int_0 = 3958
    with pytest.raises(module_3.ArgumentError):
        module_0.MultiAggregateView(var_3, set_0, int_0, var_1, tempdir=var_2)


def test_case_36():
    str_0 = "H"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        str_0, str_0, presorted=str_0, cache=str_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert len(multi_aggregate_view_0) == 1
    var_0 = module_5.nrows(multi_aggregate_view_0)
    assert var_0 == 0


def test_case_37():
    bytes_0 = b"\xbd\xcf3\x0b\xf1i/x,`p"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    none_type_1 = None
    var_0 = module_0.groupselectmin(none_type_1, none_type_1, none_type_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.RowReduceView"
    )
    assert (
        f"{type(var_0.source).__module__}.{type(var_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key is None
    assert var_0.header is None
    var_1 = var_0.takewhile(none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "itertools.takewhile"
    )
    var_2 = var_1.__iter__()
    var_3 = module_0.itermultiaggregate(var_2, var_0, none_type_1)
    var_4 = module_1.values(var_3)
    var_5 = var_4.compress(list_0)
    set_0 = {var_5}
    dict_0 = {var_5: var_4, bytes_0: none_type_0}
    var_6 = module_0.aggregate(set_0, dict_0, list_0, var_5, none_type_1, cache=var_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        f"{type(var_6.source).__module__}.{type(var_6.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert (
        f"{type(var_6.key).__module__}.{type(var_6.key).__qualname__}"
        == "builtins.dict"
    )
    assert len(var_6.key) == 2
    assert (
        f"{type(var_6.aggregation).__module__}.{type(var_6.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(var_6.aggregation) == 1
    none_type_2 = None
    list_1 = [none_type_2, none_type_2, none_type_2]
    var_7 = module_1.values(none_type_2, *list_1)
    fold_view_0 = module_0.FoldView(
        var_7, none_type_2, none_type_2, presorted=list_1, cache=var_7
    )
    assert (
        f"{type(fold_view_0).__module__}.{type(fold_view_0).__qualname__}"
        == "reductions.FoldView"
    )
    assert (
        f"{type(fold_view_0.table).__module__}.{type(fold_view_0.table).__qualname__}"
        == "petl.util.base.ValuesView"
    )
    assert fold_view_0.key is None
    assert fold_view_0.f is None
    assert fold_view_0.value is None


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "DOyRBP"
    var_0 = module_0.mergeduplicates(str_0, str_0, presorted=str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert var_0.table == "DOyRBP"
    assert var_0.key == "DOyRBP"
    assert var_0.missing is None
    var_0.tuple()


@pytest.mark.xfail(strict=True)
def test_case_39():
    bytes_0 = b"\xe6"
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\xe6"
    assert multi_aggregate_view_0.key == b"\xe6"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_0 = multi_aggregate_view_0.__setitem__(multi_aggregate_view_0, bytes_0)
    multi_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_40():
    bytes_0 = b"\xe6k"
    var_0 = bytes_0.__iter__()
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        bytes_0, bytes_0, presorted=bytes_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == b"\xe6k"
    assert multi_aggregate_view_0.key == b"\xe6k"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_1 = multi_aggregate_view_0.__setitem__(var_0, bytes_0)
    multi_aggregate_view_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    argument_error_0 = module_3.ArgumentError(none_type_0)
    var_0 = argument_error_0.__str__()
    var_1 = module_0.groupcountdistinctvalues(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.dedup.DistinctView"
    )
    assert var_1.key is None
    assert var_1.value is None
    assert var_1.field == "value"
    multi_aggregate_view_0 = module_0.MultiAggregateView(var_0, var_0, presorted=var_0)
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert multi_aggregate_view_0.source == "argument error: None"
    assert multi_aggregate_view_0.key == "argument error: None"
    assert (
        f"{type(multi_aggregate_view_0.aggregation).__module__}.{type(multi_aggregate_view_0.aggregation).__qualname__}"
        == "collections.OrderedDict"
    )
    assert len(multi_aggregate_view_0.aggregation) == 0
    var_2 = multi_aggregate_view_0.__setitem__(var_1, var_0)
    multi_aggregate_view_0.__len__()


def test_case_42():
    dict_0 = {}
    multi_aggregate_view_0 = module_0.MultiAggregateView(
        dict_0, dict_0, dict_0, tempdir=dict_0, cache=dict_0
    )
    assert (
        f"{type(multi_aggregate_view_0).__module__}.{type(multi_aggregate_view_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert (
        f"{type(multi_aggregate_view_0.source).__module__}.{type(multi_aggregate_view_0.source).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert multi_aggregate_view_0.key == {}
    assert multi_aggregate_view_0.aggregation == {}
    bytes_0 = b"\xe6"
    var_0 = module_0.itermergeduplicates(bytes_0, bytes_0, bytes_0)
    var_1 = bytes_0.__str__()
    var_2 = module_0.groupcountdistinctvalues(bytes_0, var_1, bytes_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_2.table).__module__}.{type(var_2.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_2.key == "b'\\xe6'"
    assert var_2.value is None
    assert var_2.field == "value"
    var_3 = var_2.__iter__()
    var_4 = module_0.mergeduplicates(var_3, var_1)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_4.table).__module__}.{type(var_4.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_4.key == "b'\\xe6'"
    assert var_4.missing is None
    var_4.__str__()


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\xe6"
    module_0.Conflict(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bytes_0 = b"\xdb"
    var_0 = module_0.mergeduplicates(bytes_0, bytes_0, buffersize=bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MergeDuplicatesView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == b"\xdb"
    assert var_0.missing is None
    list_0 = [bytes_0]
    var_1 = module_0.groupcountdistinctvalues(bytes_0, list_0, list_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_1.table).__module__}.{type(var_1.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_1.key == [b"\xdb"]
    assert var_1.value is None
    assert var_1.field == "value"
    module_0.MultiAggregateView(list_0, bytes_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "#ATz"
    none_type_0 = None
    var_0 = module_0.aggregate(str_0, none_type_0, presorted=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.MultiAggregateView"
    )
    assert len(var_0) == 2
    var_1 = var_0.min()
    var_1.tee(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_46():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    var_0 = module_0.groupcountdistinctvalues(dict_0, list_0, list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "reductions.SimpleAggregateView"
    )
    assert (
        f"{type(var_0.table).__module__}.{type(var_0.table).__qualname__}"
        == "petl.transform.sorts.SortView"
    )
    assert var_0.key == [None]
    assert var_0.value is None
    assert var_0.field == "value"
    var_0.product(*list_0)
